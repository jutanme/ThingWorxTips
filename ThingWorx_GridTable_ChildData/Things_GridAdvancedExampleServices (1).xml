<?xml version="1.0" encoding="UTF-8" standalone="no"?><Entities build="b30" majorVersion="9" minorVersion="2" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="0" schemaVersion="1120" universal=""><Things><Thing description="" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" inheritedValueStream="" lastModifiedDate="2023-01-29T07:30:10.199Z" name="GridAdvancedExampleServices" projectName="PTCDefaultProject" published="false" tags="Applications:GridAdvanced" thingTemplate="GenericThing" valueStream=""><Owner name="lixil001" type="User"/><avatar/><DesignTimePermissions><Create/><Read/><Update/><Delete/><Metadata/></DesignTimePermissions><RunTimePermissions/><VisibilityPermissions><Visibility/></VisibilityPermissions><ConfigurationTableDefinitions/><ConfigurationTables/><ThingShape><PropertyDefinitions/><ServiceDefinitions><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="AddOrUpdateOrDeleteDataTableEntries"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.dataShape="WeatherDataShape" baseType="INFOTABLE" description="" name="AddOrUpdatedRows" ordinal="2"/><FieldDefinition aspect.dataShape="WeatherDataShape" baseType="INFOTABLE" description="" name="DeletedRows" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="Service that allows you to 1 level to all leaf nodes or to a specified node by id." isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="AddPartsLevel"><ResultType aspect.dataShape="PartsDataShape" baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="5.0" aspect.maximumValue="10000.0" aspect.minimumValue="0.0" baseType="NUMBER" description="" name="numberParts" ordinal="1"/><FieldDefinition baseType="STRING" description="" name="parentId" ordinal="2"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="EndEdit"><ResultType baseType="BOOLEAN" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="ExpandRow"><ResultType aspect.dataShape="PartsDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetAdvancedDataTypeConfiguration"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetDefaultSelectedRow"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetDynamicParts"><ResultType aspect.dataShape="PartsDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="STRING" description="" name="id" ordinal="1"/><FieldDefinition aspect.defaultValue="1000.0" aspect.isRequired="true" aspect.maximumValue="100000.0" aspect.minimumValue="1.0" baseType="NUMBER" description="" name="numberParts" ordinal="3"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetDynamicPartsLee"><ResultType aspect.dataShape="PartsDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="STRING" description="" name="id" ordinal="1"/><FieldDefinition aspect.defaultValue="1000.0" aspect.isRequired="true" aspect.maximumValue="100000.0" aspect.minimumValue="1.0" baseType="NUMBER" description="" name="numberParts" ordinal="3"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetEditablePartsConfigurationWithFooter"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetEmployeeConfiguration"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetEmployeeData"><ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="{}" aspect.isRequired="true" baseType="QUERY" description="" name="queryFilter" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetEmployeeRoleBasedConfiguration"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetEmployeeRoleBasedData"><ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition baseType="STRING" description="" name="Role" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetPartsConfiguration"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetPartsData"><ResultType aspect.dataShape="PartsDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.isRequired="true" baseType="QUERY" description="" name="filterQuery" ordinal="6"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="id" ordinal="1"/><FieldDefinition baseType="BOOLEAN" description="" name="includesParents" ordinal="7"/><FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="leafId" ordinal="4"/><FieldDefinition aspect.defaultValue="1.0" aspect.isRequired="true" aspect.maximumValue="25.0" aspect.minimumValue="1.0" baseType="NUMBER" description="" name="maxLevels" ordinal="3"/><FieldDefinition aspect.isRequired="true" baseType="QUERY" description="" name="query" ordinal="5"/><FieldDefinition aspect.defaultValue="100000.0" aspect.isRequired="true" aspect.maximumValue="100000.0" aspect.minimumValue="0.0" baseType="NUMBER" description="" name="rowsPerLevel" ordinal="2"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetPartsFooterData"><ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="{}" aspect.isRequired="true" baseType="QUERY" description="" name="queryFilter" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetWeatherConfiguration"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetWeatherEditGridConfiguration"><ResultType baseType="STRING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetWeatherFooterData"><ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="{}" aspect.isRequired="true" baseType="QUERY" description="" name="queryFilter" ordinal="1"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="initAdvancedDataType"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="InitPartsTable"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions><FieldDefinition aspect.defaultValue="3.0" aspect.isRequired="true" aspect.maximumValue="25.0" aspect.minimumValue="1.0" baseType="NUMBER" description="" name="childLevels" ordinal="1"/><FieldDefinition aspect.defaultValue="5.0" aspect.isRequired="true" aspect.maximumValue="100.0" aspect.minimumValue="1.0" baseType="NUMBER" description="" name="numberParts" ordinal="2"/></ParameterDefinitions></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="InitWeatherTable"><ResultType baseType="NOTHING" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SelectRow"><ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition><ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="StartEdit"><ResultType baseType="BOOLEAN" description="" name="result" ordinal="0"/><ParameterDefinitions/></ServiceDefinition></ServiceDefinitions><EventDefinitions/><ServiceMappings/><ServiceImplementations><ServiceImplementation description="" handlerName="Script" name="AddOrUpdateOrDeleteDataTableEntries"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[if (AddOrUpdatedRows !== undefined && AddOrUpdatedRows.length > 0) {
    var params = {
        sourceType: undefined /* STRING */,
        values: AddOrUpdatedRows /* INFOTABLE*/,
        location: undefined /* LOCATION */,
        source: undefined /* STRING */,
        tags: undefined /* TAGS */
    };

    // no return
    Things["WeatherDataTable"].AddOrUpdateDataTableEntries(params);
}

if (DeletedRows !== undefined && DeletedRows.rows.length > 0) {
    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(WeatherDataShape)
    var params2 = {
        infoTableName : "InfoTable",
        dataShapeName : "WeatherDataShape"
    };
    var tableLength = DeletedRows.rows.length;
    for (var x = 0; x < tableLength; x++) {
        var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
        var row = DeletedRows.rows[x];
        infoTable.AddRow(row);
        Things["WeatherDataTable"].DeleteDataTableEntry({values: infoTable});
    }
}

]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="AddPartsLevel"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * Service to initialize the Parts Data Table.
 *
 * Requires the following input parameters:
 * 'numberParts'  {number} the number of part rows to create per level. Maximum: 100
 * 'parentId'     {string} the parentId under which you want to add a new level.
 *
 * NOTE:
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Update the following variables to point to the appropriate columns in your DataTable:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ID_FIELD_NAME = 'id';
var PARENT_ID_FIELD_NAME = 'parentId';
var HAS_CHILDREN_FIELD_NAME = 'hasChildren';
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Input parameters default values;
var levels = 1;
if (numberParts && numberParts > 0 && numberParts < 100000) {
    var partsPerLevel = numberParts;
} else {
    throw 'numberParts needs to be bigger than 0 and less than 100,000';
}

var parent;
var partNumberPrefix1 = 'WCDS';
var date = new Date("2017/01/01");
var earlierDate;
var currentLevel = 1;
var partId = 1;
var b = 1;

if (parentId === undefined) {
    var entries = findRowsWithoutChildren();
    if (entries.length > 0 && entries.length * partsPerLevel <= 100000) {
        if (entries.length > 0) {
            for (var i = 0; i < entries.length; i++) {
                var entry = entries[i];
                updateHasChildren(entry);
                createLevel(entry.id, currentLevel);
            }
        }
        else {
            createLevel(parentId, currentLevel);
        }
    } else if (entries.length === 0) {
        throw 'No nodes found that do not already have child nodes';
    } else {
        throw 'You have already ' + entries.length + ' rows without child rows in your grid. Adding another ' + partsPerLevel + ' rows ' +
        ' to each of those rows will cause this service to fail due to the fact that you are trying to add a total of ' + entries.length * partsPerLevel +
        ' rows to your grid. Please limit the number of parts being added or specify a "parentId" for the row under which you want to create ' +
        ' new child rows only';
    }
} else {
    var entry = findRow(parentId);
    if (entry) {
        updateHasChildren(entry);
        createLevel(parentId, currentLevel);
    } else {
        throw 'Could not find row for specified parent id "' + parentId + '"';
    }
}

function findRowsWithoutChildren() {
    var params = {
        maxItems: 100000,
        query: {
            filters: {
                type:    'OR',
                filters: [
                    {
                        fieldName: HAS_CHILDREN_FIELD_NAME,
                        value:     '0',
                        type:      'EQ'
                    },
                    {
                        fieldName: HAS_CHILDREN_FIELD_NAME,
                        value:     '0.0',
                        type:      'EQ'
                    },
                    {
                        fieldName: HAS_CHILDREN_FIELD_NAME,
                        value:     false,
                        type:      'EQ'
                    },
                    {
                        fieldName: HAS_CHILDREN_FIELD_NAME,
                        value:     'false',
                        type:      'EQ'
                    },
                    {
                        fieldName: HAS_CHILDREN_FIELD_NAME,
                        value:     '',
                        type:      'EQ'
                    },
                    {
                        fieldName: HAS_CHILDREN_FIELD_NAME,
                        value:     'undefined',
                        type:      'EQ'
                    }
                ]
            }
        }
    };
    return Things["PartsTable"].QueryDataTableEntries(params);
}

function findRow(parentId) {
    var params = {
        maxItems: 1,
        query: {
            filters: {
                fieldName: ID_FIELD_NAME,
                value:     parentId,
                type:      'EQ'
            }
        }
    };
    var entries = Things["PartsTable"].QueryDataTableEntries(params);
    return entries.length > 0 ? entries[0] : undefined;
}

function updateHasChildren(entry) {
    if (entry) {
        var newEntry = Things["PartsTable"].CreateValues();
        newEntry[PARENT_ID_FIELD_NAME] = entry[PARENT_ID_FIELD_NAME];
        newEntry[ID_FIELD_NAME] = entry[ID_FIELD_NAME];
        newEntry.name = entry.name;
        newEntry.number = entry.number;
        newEntry.orderDate = entry.orderDate;
        newEntry.quantity = entry.quantity;
        newEntry.cost = entry.cost;
        newEntry.backOrder = entry.backOrder;
        newEntry[HAS_CHILDREN_FIELD_NAME] = '1';

        var updateHasChildrenParams = {
            source: me.name,
            values: newEntry
        };
        Things["PartsTable"].AddOrUpdateDataTableEntry(updateHasChildrenParams);
    }
}

function createLevel(myParentId, level) {
    for (var j = 1; j <= partsPerLevel; j++) {
        var guid = generateGUID();
        var row = createRow(myParentId, level, guid);
        // tags:TAGS
        var tags = new Array();
        var params = {
            tags : tags,
            source : me.name,
            values : row
        };
        Things["PartsTable"].AddOrUpdateDataTableEntry(params);
    }
}

function createRow(myParentId, level, rowId) {
    // values:INFOTABLE(Datashape: PartsDataShape)
    var newEntry = Things["PartsTable"].CreateValues();
    newEntry[PARENT_ID_FIELD_NAME] = myParentId;
    newEntry[ID_FIELD_NAME] = rowId;
    var evnt;
    if(b % 5 == 0)
        evnt = 'DCM-4000XP';
    else if(b % 5 == 1)
        evnt = 'AXP-2000';
    else if (b % 5 == 2)
        evnt = 'AXP-2500';
    else if (b % 5 == 3)
        evnt = 'DRP-5000';
    else if (b % 5 == 4)
        evnt = 'XMS-1000P';
    else
        evnt = 'Undefined';
    newEntry.name = evnt;
    newEntry.number = createPartNumber(partId);
    earlierDate = date.setDate(date.getDate() - 1);
    newEntry.orderDate = earlierDate;
    newEntry.quantity = partId;
    newEntry.cost = Math.floor((Math.random() * 100) + 1) / 100;
    newEntry.backOrder = (b % 5) ? true : false;
    newEntry[HAS_CHILDREN_FIELD_NAME] = '0';
    b++;
    return newEntry;
}

function createPartNumber(partIndex) {
    var partName = '';
    if (partIndex < 10) {
        partName = '0000' + partIndex;
    }
    else if (10 >= partIndex && partIndex < 100) {
        partName = '000' + partIndex;
    }
    else if (100 >= partIndex && partIndex < 1000) {
        partName = '00' + partIndex;
    }
    else if (1000 >= partIndex && partIndex < 10000) {
        partName = '0' + partIndex;
    }
    else if (10000 >= partIndex && partIndex < 100000) {
        partName = partIndex;
    }
    return partNumberPrefix1 + partName;
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="EndEdit"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var result = false;]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="ExpandRow"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var params = {
	leafId: undefined /* STRING */,
	rowsPerLevel: undefined /* NUMBER */,
	maxLevels: 1 /* NUMBER */,
	query: undefined /* QUERY */,
	id: undefined /* STRING */,
	includesParents: undefined /* BOOLEAN */,
	filterQuery: undefined /* QUERY */
};

// result: INFOTABLE dataShape: "PartsDataShape"
var data = me.GetPartsData(params);
var params = {
	infoTableName : "InfoTable",
	dataShapeName : "PartsDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PartsDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
for(var i=0;i< data.length; i++) {
    result.addRow(data.getRow(i));
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetAdvancedDataTypeConfiguration"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var result = {
  "cellEditingEnabled": false,                  // {boolean} Optional. Specifies whether Cell editing is enabled by default for the grid, required for auto-save use-case. Disable for manual save; enable 'editButtons' in config below instead.
  "columns":    {                               // Required
    "idFieldName": "id",                        // {string} Required. The name of the 'id' column containing the primary key.
    "header":       {                           // Optional
      "titleCase":   "",                        // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
      "overflow":    "tooltip"                  // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
    },
    "columnDefs":   [                           // Optional
      {
        "targets":             0,               // {integer} the index of the column to which this data applies.
        "fieldName":           "id",            // {string} the data field name.
        "title":               "Id",            // *{string} the column display name.
        "autoWidth":           true,
        "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
        "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
        "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
        "hidden":              false,           // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "integer",
          "format":            "0",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false                                                // *{boolean} to indicate whether cell editing is enable for this column
          }            
        }
      },
      {
        "targets":             1,
        "fieldName":           "vec2_example",
        "title":               "Vec2_example",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "vec2",
          "format":            "0.00",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             2,
        "fieldName":           "vec3_example",
        "title":               "Vec3_example",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "vec3",
          "format":            "0.00",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             3,
        "fieldName":           "vec4_example",
        "title":               "Vec4_example",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "vec4",
          "format":            "0.00",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             4,
        "fieldName":           "imagelink_example",
        "title":               "Imagelink_example",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "imagelink",                                            // imagelink renderer, requires the cell data to contain a url to a MediaEntity
          "format":            "scaledtoheight",                                       // hyperlink, scaledtowidth, scaledtoheight, image
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "errorMessage":        "Invalid image link",                             // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             5,
        "fieldName":           "thingcode_example",
        "title":               "Thingcode_example",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "thingcode",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             6,
        "fieldName":           "infotable_example",
        "title":               "Infotable_example",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "infotable",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             false,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
    ],
    "enableSorting":    true,                   // Optional. Enable sorting capabilities for the grid.
    "multiColumnSortOrder": [                   // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
      {
        "id":         'id',                     // {string} column 'fieldName'
        "direction":  'asc'                     // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
      }
    ]
  },
  "rows":       {                               // Optional
    "selection":                  "multi",      // *{string} row selection setting. Options: 'none, 'single', 'multi'
    "defaultSelectedRows":        "",           // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
    "minHeight":                  "50",         // {string} row height setting in px.
    "autoScroll":                 true          // {boolean} scroll to the selected rows on update or resize
  },
  "styles":     {                               // Optional unless styles are defined in state formatters
    "tableWrapperStyle":              {         // {string} name of the style.
      "backgroundColor":          "#e6e6e6",    // {string} the background style color
      "secondaryBackgroundColor": "",           // {string} the secondary background style color for a gradient.
      "foregroundColor":          "",           // {string} the font color.
      "textDecoration":           "",           // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
      "image":                    "",           // {string} MediaEntity url
      "lineColor":                "#b3b3b3",    // {string} the color of the cell outline.
      "borderStyle":              "solid",      // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
      "borderWidth":              "1px",        // {string} the width of cell border in px.
      "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
      "fontStyle":                "normal",     // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
      "fontSize":                 "11px",       // {string} font size.
      "fontWeight":               "normal"      // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
    },
    "tableHeaderStyle":              {
      "backgroundColor":          "#202020",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "#c0c0c0",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "rowBorderStyle":                {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "cellBorderStyle":               {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "2px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "rowBackgroundStyle":            {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "2px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               ""
    },
    "rowAlternateBackgroundStyle":   {
      "backgroundColor":          "#f5f5f5",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "11px",
      "fontWeight":               ""
    },
    "rowHoverStyle":                 {
      "backgroundColor":          "#dddddd",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#333333",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "rowSelectedStyle":              {
      "backgroundColor":          "#0088cc",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "paginationButtonStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#202020",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "paginationHoverStyle": {
      "backgroundColor":          "#252525",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "paginationSelectedStyle": {
      "backgroundColor":          "#0088cc",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "toolbarStyle": {
      "backgroundColor":          "#fafafa",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#202020",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               ""
    },
    "rowFormatterStyle":             {
      "backgroundColor":          "#636262",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "black",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "sortAscendingStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "sortDescendingStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowIconStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridRowIcon",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowExpansionIconStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridRowExpansionIcon",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowCollapseIconStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridRowCollapseIcon",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "snowFormatterStyle":             {
      "backgroundColor":          "#00ffff",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "black",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "coldFormatterStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "underline",
      "image":                    "/Thingworx/MediaEntities/SubsystemNotRunning",
      "lineColor":                "black",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "warmFormatterStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "underline",
      "image":                    "/Thingworx/MediaEntities/SubsystemRunning",
      "lineColor":                "black",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "cellValidationErrorStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "none",
      "image":                    "",
      "lineColor":                "red",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "cellValidationErrorTooltipStyle":             {
      "backgroundColor":          "red",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "none",
      "image":                    "",
      "lineColor":                "white",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "tooltipStyle": {
      "backgroundColor":          "#0000ff",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "none",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               ""
    },
  },
  "search": {                                    // Optional search capabilities
    "multiColumn":  {                            // Optional global grid search control
      "enabled":  true,                          // {boolean} enable the grid search toolbar
      "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
    }
  },
  "resetButton": {                               // Optional reset button that allows the end-user to reset the user specific grid settings. It clears all the grid cookie values.
    "enabled": false,                             // {boolean} show the reset button in the Mashup.
    "location": "top-left"                       // {string} Location of the reset button. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
  },
  "editButtons": {                               // Optional edit buttons to start allow edit, save and cancel edits.
    "enabled": false,                             // {boolean} show the 'Edit' button initially and once clicked, show 'Save' and 'Cancel' buttons
    "location": "top-right",                     // {string} Location of the edit buttons. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
    "enableAddDeleteButtons": false               // {boolean} Optional. Specifies whether 'Add' and 'Delete' buttons are enabled in the grid edit toolbar.
  }
};
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetDefaultSelectedRow"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[result = '1,2,5';]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetDynamicParts"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * Service that dynamically generates tree data for Tree-Grid-Advanced widget.
 * NOTE: that you can only generate 100K rows total. The number of rows grows exponentially
 * by the number of levels in the grid.
 *
 * Requires the following input parameters:
 * 'id'          {string}  row id of the parent row for which the children are fetched.
 * 'numberParts' {number}  the number of rows that should be returned. Maximum: 100K
 */

var parent = id;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "PartsDataShape"
};

var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var date = new Date("2015/01/01");
var earlierDate;
var partNumberPrefix1 = 'WCDS';
var childLevels = 1;

var currentLevel = 1;
var partId = 1;
var b = 1;

if (childLevels === undefined || childLevels <= 0 || childLevels > 3) {
    throw '"childLevels" needs to be larger than 0 and less or equal to 3';
}
if (numberParts && numberParts > 0 && numberParts < 100000) {
    var partsPerLevel = numberParts;
} else {
    throw 'numberParts needs to be bigger than 0 and less than 100,000';
}

var totalRows = Math.pow(numberParts, childLevels);
if (totalRows > 100000) {
    throw "You can't create more than 100,000 rows at a time. Currently you specified " + totalRows;
} else {
    createLevel(parent, currentLevel);
}

function createLevel(myParentId, level) {
    for (var j = 1; j <= partsPerLevel; j++) {
        var row = createRow(myParentId, level, generateGUID());
        result.AddRow(row);
    }
}

function createRow(myParentId, level, rowId) {
    var newEntry = new Object();
    newEntry.parentId = myParentId;
    newEntry.id = rowId;
    var evnt;
    if(b % 5 == 0)
        evnt = 'DX500';
    else if(b % 5 == 1)
        evnt = 'FCS200';
    else if (b % 5 == 2)
        evnt = 'DMX250';
    else if (b % 5 == 3)
        evnt = 'BPL-2200-AX';
    else if (b % 5 == 4)
        evnt = 'ARP-2000X';
    else
        evnt = 'Undefined';
    newEntry.name = evnt;
    newEntry.number = createPartNumber(partId);
    earlierDate = date.setDate(date.getDate() - 1);
    newEntry.orderDate = earlierDate;
    newEntry.quantity = partId;
    newEntry.cost = Math.floor((Math.random() * 100) + 1) / 100;
    newEntry.backOrder = (b % 5) ? true : false;
    b++;
    newEntry.hasChildren = '1';
    if (level < childLevels) {
        createLevel(rowId, level + 1);
    }
    return newEntry;
}

function createPartNumber(partIndex) {
    var partName = '';
    if (partIndex < 10) {
        partName = '0000' + partIndex;
    }
    else if (10 >= partIndex && partIndex < 100) {
        partName = '000' + partIndex;
    }
    else if (100 >= partIndex && partIndex < 1000) {
        partName = '00' + partIndex;
    }
    else if (1000 >= partIndex && partIndex < 10000) {
        partName = '0' + partIndex;
    }
    else if (10000 >= partIndex && partIndex < 100000) {
        partName = partIndex;
    }
    return partNumberPrefix1 + partName;
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetDynamicPartsLee"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * Service that dynamically generates tree data for Tree-Grid-Advanced widget.
 * NOTE: that you can only generate 100K rows total. The number of rows grows exponentially
 * by the number of levels in the grid.
 *
 * Requires the following input parameters:
 * 'id'          {string}  row id of the parent row for which the children are fetched.
 * 'numberParts' {number}  the number of rows that should be returned. Maximum: 100K
 */

var parent = id;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "PartsDataShape"
};
logger.warn("GetDynamicPartsLee::: " + id);
var parentName = id ? id.substr(0,4) + "_" : "";

var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var date = new Date("2015/01/01");
var earlierDate;
var partNumberPrefix1 = 'WCDS';
var childLevels = 1;

var currentLevel = 1;
var partId = 1;
var b = 1;
if (childLevels === undefined || childLevels <= 0 || childLevels > 3) {
    throw '"childLevels" needs to be larger than 0 and less or equal to 3';
}
var partsPerLevel = 10;
//if (numberParts && numberParts > 0 && numberParts < 100000) {
//    var partsPerLevel = numberParts;
//} else {
//    throw 'numberParts needs to be bigger than 0 and less than 100,000';
//}

var totalRows = Math.pow(numberParts, childLevels);
if (totalRows > 100000) {
    throw "You can't create more than 100,000 rows at a time. Currently you specified " + totalRows;
} else {
    createLevel(parent, currentLevel);
}

function createLevel(myParentId, level) {
    for (var j = 1; j <= partsPerLevel; j++) {
        var row = createRow(myParentId, level, generateGUID());
        result.AddRow(row);
    }
}

function createRow(myParentId, level, rowId) {
    var newEntry = new Object();
    newEntry.parentId = myParentId;
    newEntry.id = rowId;
    var evnt;
    if(b % 5 == 0)
        evnt = 'DX500';
    else if(b % 5 == 1)
        evnt = 'FCS200';
    else if (b % 5 == 2)
        evnt = 'DMX250';
    else if (b % 5 == 3)
        evnt = 'BPL-2200-AX';
    else if (b % 5 == 4)
        evnt = 'ARP-2000X';
    else
        evnt = 'Undefined';
    
    newEntry.name = parentName + evnt;
    newEntry.number = createPartNumber(partId);
    earlierDate = date.setDate(date.getDate() - 1);
    newEntry.orderDate = earlierDate;
    newEntry.quantity = partId;
    newEntry.cost = Math.floor((Math.random() * 100) + 1) / 100;
    newEntry.backOrder = (b % 5) ? true : false;
    b++;
    newEntry.hasChildren = '1';
    if (level < childLevels) {
        createLevel(rowId, level + 1);
    }
    return newEntry;
}

function createPartNumber(partIndex) {
    var partName = '';
    if (partIndex < 10) {
        partName = '0000' + partIndex;
    }
    else if (10 >= partIndex && partIndex < 100) {
        partName = '000' + partIndex;
    }
    else if (100 >= partIndex && partIndex < 1000) {
        partName = '00' + partIndex;
    }
    else if (1000 >= partIndex && partIndex < 10000) {
        partName = '0' + partIndex;
    }
    else if (10000 >= partIndex && partIndex < 100000) {
        partName = partIndex;
    }
    return partNumberPrefix1 + partName;
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetEditablePartsConfigurationWithFooter"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 USE CASE: Parts Data
 This example shows hierarchical parts data that is loaded by the tree-advanced-grid as a tree structure when you specify
 the parentId, id and hasChildren columns appropriately.

 ThingWorx Configuration setup for this example:

 1) Create a Thing 'PartsManager' with a service called 'getPartsConfiguration' that contains the content of this file.
 2) Create a DataShape 'PartsDataShape' with part fields and the 'id' field as the primary key.
 3) Create a Parts DataTable 'PartsTable' based on the 'PartsDataShape'
 4) Create a another service on the 'PartsManager' called 'initPartsTable' and past the content of the 'init-parts-table.js' in it.
 5) Test the 'initPartsTable' service to initialize the parts table with the number of rows per grid and the number of nested levels.
 NOTE: limit the nesting levels to 3.
 6) Verify content of the table by Testing the getDataTableEntries service on the PartsTable DataTable.
 7) Bind the getDataTableEntries service to the Data property on the grid.
 8) Create a service on the 'PartsManager' called 'getPartsChildData' and copy/paste the content of 'parts-info-data.js' in that
 9) Bind the 'getPartsChildData' to the 'ChildData' property of the grid.
 */

var result = {
    "cellEditingEnabled": false,                        // Specifies whether Cell editing is enabled by default for the grid, required for auto-save use-case. Disable for manual save; enable 'editButtons' in config below instead.
    "enableFooter": true,                               // Optional. Enables a footer to show a roll-up of numeric column values. Default is false.
    "columns":    {                                     // Required
        "idFieldName": "id",                            // {string} Required. The name of the 'id' column containing the primary key.
        "header":       {                               // Optional
            "titleCase":   "",                          // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
            "overflow":    "wrapped"                    // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
        },
        "columnDefs":   [                               // Optional
            {
                "targets":             0,               // {integer} the index of the column to which this data applies.
                "fieldName":           "key",           // {string} the data field name.
                "title":               "Key",           // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             1,               // {integer} the index of the column to which this data applies.
                "fieldName":           "location",      // {string} the data field name.
                "title":               "Location",      // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             2,               // {integer} the index of the column to which this data applies.
                "fieldName":           "source",        // {string} the data field name.
                "title":               "Source",        // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             3,               // {integer} the index of the column to which this data applies.
                "fieldName":           "sourceType",    // {string} the data field name.
                "title":               "Source Type",   // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             4,               // {integer} the index of the column to which this data applies.
                "fieldName":           "tags",          // {string} the data field name.
                "title":               "Tags",          // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             5,
                "fieldName":           "timestamp",
                "title":               "Timestamp",
                "width":               "150px",
                "autoWidth":           false,
                "overflow":            "wrapped",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            false,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "datetime",
                    "format":          "yyyy-MM-dd HH:mm:ss.SSS"
                }
            },
            {
                "targets":             6,
                "fieldName":           "parentId",
                "title":               "Parent Id",
                "width":               "250px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full",
                    "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         false                                               // *{boolean} to indicate whether cell editing is enable for this column
    	    		}
                }
            },
            {
                "targets":             7,
                "fieldName":           "id",
                "title":               "Id",
                "width":               "250px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full",
                    "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         false                                               // *{boolean} to indicate whether cell editing is enable for this column
    	    		}
                }
            },
            {
                "targets":             8,
                "fieldName":           "name",
                "title":               "Name",
                "width":               "150px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full",
                    "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         true                                                // *{boolean} to indicate whether cell editing is enable for this column
    	    		}
                }
            },
            {
                "targets":             9,
                "fieldName":           "number",
                "title":               "Number",
                "width":               "150px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full",
                	"cellEditor":          {                                                   // optional: defines cell-editing options for this column
		            	"enabled":         true                                                // *{boolean} to indicate whether cell editing is enable for this column
        			}
                }
            },
            {
                "targets":             10,
                "fieldName":           "orderDate",
                "title":               "Order Date",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "datetime",
                    "format":          "yyyy-MM-dd HH:mm:ss.SSS",
                    "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         true                                                // *{boolean} to indicate whether cell editing is enable for this column
    	    		}
                }
            },
            {
                "targets":             11,
                "fieldName":           "quantity",
                "title":               "Quantity",
                "width":               "50px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "integer",
                    "format":          "0",
                    "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         true                                                // *{boolean} to indicate whether cell editing is enable for this column
    	    		}
                }
            },
            {
                "targets":             12,
                "fieldName":           "cost",
                "title":               "Cost",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "number",
                    "format":          "0.00",
	                "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         true                                                // *{boolean} to indicate whether cell editing is enable for this column
        			}
                }
            },
            {
                "targets":             13,
                "fieldName":           "backOrder",
                "title":               "On Back Order?",
                "width":               "*",
                "autoWidth":           true,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "boolean",
                    "format":          "text",
	                "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         true                                                // *{boolean} to indicate whether cell editing is enable for this column
        			}
                }
            },
            {
                "targets":             14,
                "fieldName":           "hasChildren",
                "title":               "Has Children",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            false,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "text",                                                 // Specify whether to use the top-level 'top' or 'child' Data and Configuration services. Options: 'top' 'child'
	                "cellEditor":          {                                                   // optional: defines cell-editing options for this column
			            "enabled":         false                                               // *{boolean} to indicate whether cell editing is enable for this column
        			}
                }
            }
        ],
        "enableSorting":    true,                       // Optional. Enable sorting capabilities for the grid.
        "multiColumnSortOrder": [                       // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
            {
                "id":         'name',                   // {int} column index
                "direction":  'asc'                     // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
            }
        ]
    },
    "rows":       {                                     // Optional
        "selection":                  "multi",          // *{string} row selection setting. Options: 'none, 'single', 'multi'
        "defaultSelectedRows":        "",               // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
        "minHeight":                  "30",            // {string} row height setting in px.
        "autoScroll":                 true,             // {boolean} scroll to the selected rows on update or resize
        "rowFormatter": {                               // Optional. Format entire row based on a fixed style or state definition.
            "stateDefinition": {                        // Required
                "name":      "BackOrder",               // {string} name of the state definition.
                "fieldName": "backOrder",                   // {string} name of the column data field.
                "type":      "not-fixed",               // {string} type of state definition. Options 'fixed', 'not-fixed'.
                "states":    [                          // Required
                    {
                        "name":       "OnBackOrder",                    // {string} the name of the state
                        "value":      true,                             // {*} the value of the state that needs to match the fieldName value.
                        "comparator": "==",                             // {string} the comparator. Options: '==', '<', '>', '<=', '>=', '!='
                        "styleName":  "rowFormatterStyle"               // {string} the name of the style to apply from the list of styles below when state matches.
                    }
                ]
            }
        }
    }
    ,
    "styles":     {                                    // Optional unless styles are defined in state formatters
        "tableWrapperStyle":              {            // {string} name of the style.
            "backgroundColor":          "#636262",     // {string} the background style color
            "secondaryBackgroundColor": "",            // {string} the secondary background style color for a gradient.
            "foregroundColor":          "",            // {string} the font color.
            "textDecoration":           "",            // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
            "image":                    "url",         // {string} MediaEntity url
            "lineColor":                "#b3b3b3",     // {string} the color of the cell outline.
            "borderStyle":              "solid",       // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
            "borderWidth":              "1px",         // {string} the width of cell border in px.
            "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
            "fontStyle":                "normal",      // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
            "fontSize":                 "11px",        // {string} font size.
            "fontWeight":               "normal"       // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
        },
        "tableHeaderStyle":              {
            "backgroundColor":          "#202020",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "url",
            "lineColor":                "#c0c0c0",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
         "tableFooterStyle":              {
            "backgroundColor":          "#202020",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "#543737",
            "borderStyle":              "solid",
            "borderWidth":              "4px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "13px",
            "fontWeight":               ""
        },
        "rowBorderStyle":                {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "cellBorderStyle":               {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "2px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "rowBackgroundStyle":            {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "2px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               ""
        },
        "rowAlternateBackgroundStyle":   {
            "backgroundColor":          "#f5f5f5",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "11px",
            "fontWeight":               ""
        },
        "rowHoverStyle":                 {
            "backgroundColor":          "#dddddd",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#333333",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "normal"
        },
        "rowSelectedStyle":              {
            "backgroundColor":          "#0088cc",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "paginationButtonStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#202020",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "paginationHoverStyle": {
            "backgroundColor":          "#252525",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "paginationSelectedStyle": {
            "backgroundColor":          "#0088cc",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "toolbarStyle": {
            "backgroundColor":          "#fafafa",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#202020",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               ""
        },
        "rowFormatterStyle":             {
            "backgroundColor":          "#636262",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "black",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "14px",
            "fontWeight":               "bold"
        },
        "sortAscendingStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "sortDescendingStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowExpansionIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowExpansionIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowCollapseIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowCollapseIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "highSalaryStyle":                   {
            "backgroundColor":          "red",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "red",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "italic",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "lowSalaryStyle":                {
            "backgroundColor":          "green",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "italic",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        }
    },
    "search": {                                        // Optional search capabilities
        "multiColumn":  {                              // Optional global grid search control
            "enabled":  true,                          // {boolean} enable the grid search toolbar
            "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
        }
    },
    "resetButton": {                                   // Optional reset button that allows the end-user to reset the user specific grid settings. It clears all the grid cookie values.
        "enabled": true,                               // {boolean} show the reset button in the Mashup.
        "location": "bottom-right"                     // {string} Location of the reset button. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
    },
    "editButtons": {                               // Optional edit buttons to start allow edit, save and cancel edits.
        "enabled": true,                            // {boolean} show the 'Edit' button initially and once clicked, show 'Save' and 'Cancel' buttons
        "location": "top-right"                      // {string} Location of the edit buttons. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
    },
    "treeSettings": {                                  // Required for Tree Grid.
        "parentIdFieldName": "parentId",               // {string} The grid column that contains the parent ID
        "hasChildrenFieldName": "hasChildren",         // {string} The grid column that contains the information whether the row has children or not. Value options: "1" or "0".
        "maxRowCacheSize": 100000,                     // {integer} The total number of rows that can be cached client side. A warning message is shown when cache limit is reached, user will need to close nodes or refresh browser at that point.
        "expandAllLoadedLevels": false,                // {boolean} Specifies whether to expand all the initially loaded rows.
        "preserveRowExpansion": false,                 // {boolean} Specifies whether row expansions should be persisted in a user specific cookie.
        "expandRowOnDoubleClick": false,               // {boolean} Specifies whether the row should be expanded when double clicked.
        "includeRowExpansionParents": false,           // {boolean} Fetch parent rows of expanded or selected rows that are not pre-loaded.
        "idPathSeparator": ':;'                        // {string} The ID path separator that is used in ID paths for the selection of non-loaded rows.
    }
};


]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetEmployeeConfiguration"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 USE CASE: Employee Data
 This example shows Employee data with salary and hire date information.

 ThingWorx Configuration setup for this example:

 1) Create a Thing with a service called 'getConfiguration' that contains the content of this file.
 2) Create another service that called 'getEmployeeData' that contains the content of the 'employee-data.js' file.
 3) Bind the 'getConfiguration' service to the 'Configuration' property in Mashup Builder.
 4) Bind the 'getEmployeeData' service to the 'Data' property in Mashup Builder.
 5) Update any of the settings below
 */

var result = {
    "columns":    {                                     // Required
        "idFieldName": "id",                            // {string} Required. The name of the 'id' column containing the primary key.
        "header":       {                               // Optional
            "titleCase":   "",                          // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
            "overflow":    "wrapped"                    // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
        },
        "columnDefs":   [                               // Optional
            {
                "targets":             0,               // {integer} the index of the column to which this data applies.
                "fieldName":           "name",          // {string} the data field name.
                "title":               "My Name",       // *{string} the column display name.
                "width":               "*",             // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           true,            // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              false,           // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            true,
                "columnFormatter":     {                // Optional
                    "type":            "string",        // {string} the column renderer to use for formatting the column value. Options: 'string', 'number', 'long', 'boolean', 'html', 'hyperlink', 'imagelink', 'default'.
                    "format":          "",              // {string} format string based on the type of renderer. See Mashup builder UI for format strings per renderer.
                    "stateDefinition": {                // Optional
                        "name":      "EngineerNames",   // {string} name of this state definition.
                        "type":      "non-fixed",       // {string} type of state definition. Options 'fixed', 'not-fixed'.
                        "fieldName": "title",           // {string} the column fieldName that drives this state-definition.
                        "states":    [                  // Required.
                            {
                                "name":       "Engineers",          // {string} the name of the state
                                "value":      "Software Engineer",  // {*} the value of the state that needs to match the fieldName value.
                                "comparator": "==",                 // {string} the comparator. Options: '==', '<', '>', '<=', '>=', '!='
                                "styleName":  "rowFormatterStyle"   // {string} the name of the style to apply from the list of styles below when state matches.
                            }
                        ]
                    }
                }
            },
            {
                "targets":             1,
                "fieldName":           "title",
                "title":               "Title",
                "width":               "200px",
                "autoWidth":           false,
                "overflow":            "wrapped",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full"
                }
            },
            {
                "targets":             2,
                "fieldName":           "office",
                "title":               "Office",
                "width":               "300px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full"
                }
            },
            {
                "targets":             3,
                "fieldName":           "id",
                "title":               "Id",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "...."
            },
            {
                "targets":             4,
                "fieldName":           "salary",
                "title":               "Salary",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "number",
                    "format":          "0,000",
                    "stateDefinition": {
                        "name":      "OnOff",
                        "fieldName": "salary",
                        "type":      "non-fixed",
                        "states":    [
                            {
                                "name":       "HighSalary",
                                "value":      300000,
                                "comparator": ">",
                                "styleName":  "highSalaryStyle"
                            },
                            {
                                "name":       "LowSalary",
                                "value":      100000,
                                "comparator": "<",
                                "styleName":  "lowSalaryStyle"
                            }
                        ]
                    }
                }
            },
            {
                "targets":             5,
                "fieldName":           "hiredate",
                "title":               "Hire Date",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "...."
            }
        ],
        "enableSorting":    true,                       // Optional. Enable sorting capabilities for the grid.
        "multiColumnSortOrder": [                       // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
            {
                'id':         'title',                     // {string} column 'fieldName'
                'direction':  'asc'                     // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
            },
            {
                'id':        'office',
                'direction': 'des'
            },
            {
                'id':        'id',
                'direction':  'asc'
            }
        ]
    },
    "rows":       {                                     // Optional
        "selection":                  "multi",          // *{string} row selection setting. Options: 'none, 'single', 'multi'
        "defaultSelectedRows":        "1,3",            // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
        "minHeight":                  "30",             // {string} row height setting in px.
        "rowFormatter": {                               // Optional. Format entire row based on a fixed style or state definition.
            "stateDefinition": {                        // Required
                "name":      "CeoRowHighlight",         // {string} name of the state definition.
                "fieldName": "title",                   // {string} name of the column data field.
                "type":      "not-fixed",               // {string} type of state definition. Options 'fixed', 'not-fixed'.
                "states":    [                          // Required
                    {
                        "name":       "CEO",                            // {string} the name of the state
                        "value":      "Chief Executive Officer (CEO)",  // {*} the value of the state that needs to match the fieldName value.
                        "comparator": "==",                             // {string} the comparator. Options: '==', '<', '>', '<=', '>=', '!='
                        "styleName":  "rowFormatterStyle"               // {string} the name of the style to apply from the list of styles below when state matches.
                    }
                ]
            }
        }
    }
    ,
    "styles":     {                                    // Optional unless styles are defined in state formatters
        "tableWrapperStyle":              {            // {string} name of the style.
            "backgroundColor":          "#e6e6e6",     // {string} the background style color
            "secondaryBackgroundColor": "",            // {string} the secondary background style color for a gradient.
            "foregroundColor":          "",            // {string} the font color.
            "textDecoration":           "",            // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
            "image":                    "",            // {string} MediaEntity url
            "lineColor":                "#b3b3b3",     // {string} the color of the cell outline.
            "borderStyle":              "solid",       // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
            "borderWidth":              "1px",         // {string} the width of cell border in px.
            "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
            "fontStyle":                "normal",      // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
            "fontSize":                 "11px",        // {string} font size.
            "fontWeight":               "normal"       // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
        },
        "tableHeaderStyle":              {
            "backgroundColor":          "#202020",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "#c0c0c0",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "rowBorderStyle":                {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""

        },
        "cellBorderStyle":               {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "underline",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "2px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "16px",
            "fontWeight":               "bold"
        },
        "rowBackgroundStyle":            {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "underline",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "2px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               ""
        },
        "rowAlternateBackgroundStyle":   {
            "backgroundColor":          "#f5f5f5",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "11px",
            "fontWeight":               ""
        },
        "rowHoverStyle":                 {
            "backgroundColor":          "#dddddd",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#333333",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "normal"
        },
        "rowSelectedStyle":              {
            "backgroundColor":          "#0088cc",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "paginationButtonStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#202020",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "paginationHoverStyle": {
            "backgroundColor":          "#252525",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "paginationSelectedStyle": {
            "backgroundColor":          "#0088cc",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "toolbarStyle": {
            "backgroundColor":          "#fafafa",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#202020",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               ""
        },
        "rowFormatterStyle":             {
            "backgroundColor":          "#636262",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "",
            "lineColor":                "black",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "14px",
            "fontWeight":               "bold"
        },
        "sortAscendingStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "sortDescendingStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowExpansionIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowExpansionIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowCollapseIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowCollapseIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "highSalaryStyle":                   {
            "backgroundColor":          "red",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "/Thingworx/MediaEntities/SubsystemNotRunning",
            "lineColor":                "red",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "italic",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "lowSalaryStyle":                {
            "backgroundColor":          "green",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "/Thingworx/MediaEntities/SubsystemRunning",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "italic",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        }
    },
    "search": {                                        // Optional search capabilities
        "multiColumn":  {                              // Optional global grid search control
            "enabled":  true,                         // {boolean} enable the grid search toolbar
            "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
        }
    },
    "resetButton": {                                   // Optional reset button that allows the end-user to reset the user specific grid settings. It clears all the grid cookie values.
        "enabled": true,                               // {boolean} show the reset button in the Mashup.
        "location": "top-right"                        // {string} Location of the reset button. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
    }
};


]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetEmployeeData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * This is an Example service to load Employee data for the 'Employee' examples.
 *
 * Required Input parameters:
 * @param {Query} queryFilter the filter query object coming from the Grid-Advanced widget. Set default value in Mashup Builder
 * input parameters for the service to an empty object: {}
 * @return {InfoTable} with filtered and sorted data.
 *
 **/

var data = createData();
var params = {
    t: createInfoTable(data) /* INFOTABLE */,
    query: queryFilter       /* QUERY INPUT PARAMETER*/
};

// result: INFOTABLE
var result = Resources["InfoTableFunctions"].Query(params);


/**
 * Create an InfoTable for your data
 * @param {Array} data a two-dimensional array of data.
 * @returns {InfoTable} an InfoTable with data.
 */
function createInfoTable(data) {
    var params = {
        infoTableName: undefined /* STRING */
    };
    var result = Resources["InfoTableFunctions"].CreateInfoTable(params);
    //Add a new field to the InfoTable:
    result.AddField({name: "name", baseType: "STRING"});
    result.AddField({name: "title", baseType: "STRING"});
    result.AddField({name: "office", baseType: "STRING"});
    result.AddField({name: "id", baseType: "NUMBER"});
    result.AddField({name: "hiredate", baseType: "STRING"});
    result.AddField({name: "salary", baseType: "NUMBER"});

    var i = 0;
    for (i = 0; i < data.data.length; i++) {
        var employee = data.data[i];
        result.AddRow({
                          'name':     employee[0],
                          'title':    employee[1],
                          'office':   employee[2],
                          'id':       employee[3],
                          'hiredate': employee[4],
                          'salary':   employee[5]
                      });
    }
    return result;
}

/**
 * Create sample Employee data
 *
 * @returns {{data: *[]}} on object with a two-dimensional array of data.
 */
function createData() {
    var data =
    {
        "data": [
            [
                "Tiger Nixon",
                "System Architect",
                "Edinburgh",
                "5421",
                "2011/04/25",
                320800
            ],
            [
                "Garrett Winters",
                "Accountant",
                "Tokyo",
                "8422",
                "2011/07/25",
                170750
            ],
            [
                "Ashton Cox",
                "Junior Technical Author",
                "San Francisco",
                "1562",
                "2009/01/12",
                86000
            ],
            [
                "Cedric Kelly",
                "Senior Javascript Developer",
                "Edinburgh",
                "6224",
                "2012/03/29",
                433060
            ],
            [
                "Airi Satou",
                "Accountant",
                "Tokyo",
                "5407",
                "2008/11/28",
                162700
            ],
            [
                "Brielle Williamson",
                "Integration Specialist",
                "New York",
                "4804",
                "2012/12/02",
                372000
            ],
            [
                "Herrod Chandler",
                "Sales Assistant",
                "San Francisco",
                "9608",
                "2012/08/06",
                137500
            ],
            [
                "Rhona Davidson",
                "Integration Specialist",
                "Tokyo",
                "6200",
                "2010/10/14",
                327900
            ],
            [
                "Colleen Hurst",
                "Javascript Developer",
                "San Francisco",
                "2360",
                "2009/09/15",
                205500
            ],
            [
                "Sonya Frost",
                "Software Engineer",
                "Edinburgh",
                "1667",
                "2008/12/13",
                103600
            ],
            [
                "Jena Gaines",
                "Office Manager",
                "London",
                "3814",
                "2008/12/19",
                90560
            ],
            [
                "Quinn Flynn",
                "Support Lead",
                "Edinburgh",
                "9497",
                "2013/03/03",
                344000
            ],
            [
                "Charde Marshall",
                "Regional Director",
                "San Francisco",
                "6741",
                "2008/10/16",
                470600
            ],
            [
                "Haley Kennedy",
                "Senior Marketing Designer",
                "London",
                "3597",
                "2012/12/18",
                313500
            ],
            [
                "Tatyana Fitzpatrick",
                "Regional Director",
                "London",
                "1965",
                "2010/03/17",
                385750
            ],
            [
                "Michael Silva",
                "Marketing Designer",
                "London",
                "1581",
                "2012/11/27",
                198500
            ],
            [
                "Paul Byrd",
                "Chief Financial Officer (CFO)",
                "New York",
                "3059",
                "2010/06/09",
                725000
            ],
            [
                "Gloria Little",
                "Systems Administrator",
                "New York",
                "1721",
                "2009/04/10",
                237500
            ],
            [
                "Bradley Greer",
                "Software Engineer",
                "London",
                "2558",
                "2012/10/13",
                132000
            ],
            [
                "Dai Rios",
                "Personnel Lead",
                "Edinburgh",
                "2290",
                "2012/09/26",
                217500
            ],
            [
                "Jenette Caldwell",
                "Development Lead",
                "New York",
                "1937",
                "2011/09/03",
                345000
            ],
            [
                "Yuri Berry",
                "Chief Marketing Officer (CMO)",
                "New York",
                "6154",
                "2009/06/25",
                675000
            ],
            [
                "Caesar Vance",
                "Pre-Sales Support",
                "New York",
                "8330",
                "2011/12/12",
                106450
            ],
            [
                "Doris Wilder",
                "Sales Assistant",
                "Sidney",
                "3023",
                "2010/09/20",
                85600
            ],
            [
                "Angelica Ramos",
                "Chief Executive Officer (CEO)",
                "London",
                "5797",
                "2009/10/09",
                1200000
            ],
            [
                "Gavin Joyce",
                "Developer",
                "Edinburgh",
                "8822",
                "2010/12/22",
                92575
            ],
            [
                "Jennifer Chang",
                "Regional Director",
                "Singapore",
                "9239",
                "2010/11/14",
                357650
            ],
            [
                "Brenden Wagner",
                "Software Engineer",
                "San Francisco",
                "1314",
                "2011/06/07",
                206850
            ],
            [
                "Fiona Green",
                "Chief Operating Officer (COO)",
                "San Francisco",
                "2947",
                "2010/03/11",
                850000
            ],
            [
                "Shou Itou",
                "Regional Marketing",
                "Tokyo",
                "8899",
                "2011/08/14",
                163000
            ],
            [
                "Michelle House",
                "Integration Specialist",
                "Sidney",
                "2769",
                "2011/06/02",
                95400
            ],
            [
                "Suki Burks",
                "Developer",
                "London",
                "6832",
                "2009/10/22",
                114500
            ],
            [
                "Prescott Bartlett",
                "Technical Author",
                "London",
                "3606",
                "2011/05/07",
                145000
            ],
            [
                "Gavin Cortez",
                "Team Leader",
                "San Francisco",
                "2860",
                "2008/10/26",
                235500
            ],
            [
                "Martena Mccray",
                "Post-Sales support",
                "Edinburgh",
                "8240",
                "2011/03/09",
                324050
            ],
            [
                "Unity Butler",
                "Marketing Designer",
                "San Francisco",
                "5384",
                "2009/12/09",
                85675
            ],
            [
                "Howard Hatfield",
                "Office Manager",
                "San Francisco",
                "7031",
                "2008/12/16",
                164500
            ],
            [
                "Hope Fuentes",
                "Secretary",
                "San Francisco",
                "6318",
                "2010/02/12",
                109850
            ],
            [
                "Vivian Harrell",
                "Financial Controller",
                "San Francisco",
                "9422",
                "2009/02/14",
                452500
            ],
            [
                "Timothy Mooney",
                "Office Manager",
                "London",
                "7580",
                "2008/12/11",
                136200
            ],
            [
                "Jackson Bradshaw",
                "Director",
                "New York",
                "1042",
                "2008/09/26",
                645750
            ],
            [
                "Olivia Liang",
                "Support Engineer",
                "Singapore",
                "2120",
                "2011/02/03",
                234500
            ],
            [
                "Bruno Nash",
                "Software Engineer",
                "London",
                "6222",
                "2011/05/03",
                163500
            ],
            [
                "Sakura Yamamoto",
                "Support Engineer",
                "Tokyo",
                "9383",
                "2009/08/19",
                139575
            ],
            [
                "Thor Walton",
                "Developer",
                "New York",
                "8327",
                "2013/08/11",
                98540
            ],
            [
                "Finn Camacho",
                "Support Engineer",
                "San Francisco",
                "2927",
                "2009/07/07",
                87500
            ],
            [
                "Serge Baldwin",
                "Data Coordinator",
                "Singapore",
                "8352",
                "2012/04/09",
                138575
            ],
            [
                "Zenaida Frank",
                "Software Engineer",
                "New York",
                "7439",
                "2010/01/04",
                125250
            ],
            [
                "Zorita Serrano",
                "Software Engineer",
                "San Francisco",
                "4389",
                "2012/06/01",
                115000
            ],
            [
                "Jennifer Acosta",
                "Junior Javascript Developer",
                "Edinburgh",
                "3431",
                "2013/02/01",
                75650
            ],
            [
                "Cara Stevens",
                "Sales Assistant",
                "New York",
                "3990",
                "2011/12/06",
                145600
            ],
            [
                "Hermione Butler",
                "Regional Director",
                "London",
                "1016",
                "2011/03/21",
                356250
            ],
            [
                "Lael Greer",
                "Systems Administrator",
                "London",
                "6733",
                "2009/02/27",
                103500
            ],
            [
                "Jonas Alexander",
                "Developer",
                "San Francisco",
                "8196",
                "2010/07/14",
                86500
            ],
            [
                "Shad Decker",
                "Regional Director",
                "Edinburgh",
                "6373",
                "2008/11/13",
                183000
            ],
            [
                "Michael Bruce",
                "Javascript Developer",
                "Singapore",
                "5384",
                "2011/06/27",
                183000
            ],
            [
                "Donna Snider",
                "Customer Support",
                "New York",
                "4226",
                "2011/01/25",
                112000
            ]
        ]
    };
    return data;
}

]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetEmployeeRoleBasedConfiguration"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 USE CASE: Role Based DataTable that doesn't require a DataShape.
 This example shows Employee data with salary and hire date information.
 In a single mashup, depending on the user, different data is shown, e.g. a CEO in the ceos usergroup can see all
 information, but a Software Engineer in the engineers user group cannot see salary and hire date info.
 Because the salary data is senstive information it cannot be send back with the payload and just be hidden in the
 datatable. The actual data service needs to ensure that only the data that is visible to the end user is returned.
 The Configuration service needs to ensure that it defines the configuration for just those columns that are returned
 as well.

 ThingWorx Configuration setup for this example:

 1) Create a user group called 'ceos' and 'engineers'
 2) Create 2 users and add one to each user group.
 3) Add design and runtime privileges to each group so that they can see and execute services, mashups and things.
 4) Create a Thing with a service called 'getConfiguration' that returns a String. Paste this file into that service.
 5) On that same Thing, add another service called 'getRoleBasedData' that returns a String. Paste the content of role-based-data.js
 in that service.
 6) Create a Mashup with a DataTable where the data is bound to the 'getRoleBasedData' service and the 'configuration' is
 bound to the 'getConfiguration' service.
 */

var result = configuration();
// result: INFOTABLE dataShape: EntityList
var usergroups = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
var tableLength = usergroups.rows.length;
var isCeo = false;
var isEngineer = false;
for (var x = 0; x < tableLength; x++) {
    var row = usergroups.rows[x];
    if(row.name === 'ceos') {
        isCeo = true;
    }
    if( row.name === 'engineers') {
        isEngineer = true;
    }
}

if(isEngineer) {
    result.columns.columnDefs.splice(3,2);
}

function configuration() {
    var configuration = {
        "columns":    {                                     // Required
            "idFieldName": "id",                            // {string} Required. The name of the 'id' column containing the primary key.
            "header":       {                               // Optional
                "titleCase":   "",                          // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
                "overflow":    "wrapped"                    // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis', 'tooltip'
            },
            "columnDefs":   [                               // Optional
                {
                    "targets":             0,               // {integer} the index of the column to which this data applies.
                    "fieldName":           "name",          // {string} the data field name.
                    "title":               "My Name",       // *{string} the column display name.
                    "width":               "*",             // *{string} the column width in px. Options: '*' (auto-width) or a number.
                    "autoWidth":           true,            // *{boolean} enables auto width e.g. '*' setting above.
                    "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis', 'tooltip'
                    "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                    "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                    "hidden":              false,           // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                    "inLayout":            true,
                    "columnFormatter":     {                // Optional
                        "type":            "string",        // {string} the column renderer to use for formatting the column value. Options: 'string', 'number', 'long', 'boolean', 'html', 'hyperlink', 'imagelink', 'default'.
                        "format":          "",              // {string} format string based on the type of renderer. See Mashup builder UI for format strings per renderer.
                        "stateDefinition": {                // Optional
                            "name":      "EngineerNames",   // {string} name of this state definition.
                            "type":      "non-fixed",       // {string} type of state definition. Options 'fixed', 'not-fixed'.
                            "fieldName": "title",           // {string} the column fieldName that drives this state-definition.
                            "states":    [                  // Required.
                                {
                                    "name":       "Engineers",          // {string} the name of the state
                                    "value":      "Software Engineer",  // {*} the value of the state that needs to match the fieldName value.
                                    "comparator": "==",                 // {string} the comparator. Options: '==', '<', '>', '<=', '>=', '!='
                                    "styleName":  "rowFormatterStyle"   // {string} the name of the style to apply from the list of styles below when state matches.
                                }
                            ]
                        }
                    }
                },
                {
                    "targets":             1,
                    "fieldName":           "title",
                    "title":               "Title",
                    "width":               "200px",
                    "autoWidth":           false,
                    "overflow":            "wrapped",
                    "headerTextAlignment": "center",
                    "textAlignment":       "left",
                    "hidden":              false,
                    "inLayout":            true,
                    "description":         "....",
                    "columnFormatter":     {
                        "type":            "string",
                        "format":          "full"
                    }
                },
                {
                    "targets":             2,
                    "fieldName":           "office",
                    "title":               "Office",
                    "width":               "300px",
                    "autoWidth":           false,
                    "overflow":            "ellipsis",
                    "headerTextAlignment": "center",
                    "textAlignment":       "left",
                    "hidden":              false,
                    "inLayout":            true,
                    "description":         "....",
                    "columnFormatter":     {
                        "type":            "string",
                        "format":          "full"
                    }
                },
                {
                    "targets":             3,
                    "fieldName":           "id",
                    "title":               "Id",
                    "width":               "100px",
                    "autoWidth":           false,
                    "overflow":            "ellipsis",
                    "headerTextAlignment": "center",
                    "textAlignment":       "left",
                    "hidden":              false,
                    "inLayout":            true,
                    "description":         "...."
                },
                {
                    "targets":             4,
                    "fieldName":           "salary",
                    "title":               "Salary",
                    "width":               "100px",
                    "autoWidth":           false,
                    "overflow":            "ellipsis",
                    "headerTextAlignment": "center",
                    "textAlignment":       "left",
                    "hidden":              false,
                    "inLayout":            true,
                    "description":         "....",
                    "columnFormatter":     {
                        "type":            "number",
                        "format":          "0,000",
                        "stateDefinition": {
                            "name":      "OnOff",
                            "fieldName": "salary",
                            "type":      "non-fixed",
                            "states":    [
                                {
                                    "name":       "HighSalary",
                                    "value":      300000,
                                    "comparator": ">",
                                    "styleName":  "highSalaryStyle"
                                },
                                {
                                    "name":       "LowSalary",
                                    "value":      100000,
                                    "comparator": "<",
                                    "styleName":  "lowSalaryStyle"
                                }
                            ]
                        }
                    }
                },
                {
                    "targets":             5,
                    "fieldName":           "hiredate",
                    "title":               "Hire Date",
                    "width":               "100px",
                    "autoWidth":           false,
                    "overflow":            "ellipsis",
                    "headerTextAlignment": "center",
                    "textAlignment":       "left",
                    "hidden":              false,
                    "inLayout":            true,
                    "description":         "...."
                }
            ],
            "enableSorting":    true,                       // Optional. Enable sorting capabilities for the grid.
            "multiColumnSortOrder": [                       // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
                {
                    id:         'id',                       // {string} column 'fieldName'
                    direction:  'asc'                       // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
                },
                {
                    id:        'office',
                    direction: 'asc'
                },
                {
                    id:        'title',
                    direction:  'des'
                }
            ]
        },
        "rows":       {                                     // Optional
            "selection":                  "multi",          // *{string} row selection setting. Options: 'none, 'single', 'multi'
            "defaultSelectedRows":        "1,3",            // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
            "minHeight":                  "30",             // {string} row height setting in px.
            "rowFormatter": {                               // Optional. Format entire row based on a fixed style or state definition.
                "stateDefinition": {                        // Required
                    "name":      "CeoRowHighlight",         // {string} name of the state definition.
                    "fieldName": "title",                   // {string} name of the column data field.
                    "type":      "not-fixed",               // {string} type of state definition. Options 'fixed', 'not-fixed'.
                    "states":    [                          // Required
                        {
                            "name":       "CEO",                            // {string} the name of the state
                            "value":      "Chief Executive Officer (CEO)",  // {*} the value of the state that needs to match the fieldName value.
                            "comparator": "==",                             // {string} the comparator. Options: '==', '<', '>', '<=', '>=', '!='
                            "styleName":  "rowFormatterStyle"               // {string} the name of the style to apply from the list of styles below when state matches.
                        }
                    ]
                }
            }
        }
        ,
        "styles":     {                                    // Optional unless styles are defined in state formatters
            "tableWrapperStyle":              {            // {string} name of the style.
                "backgroundColor":          "#e6e6e6",     // {string} the background style color
                "secondaryBackgroundColor": "",            // {string} the secondary background style color for a gradient.
                "foregroundColor":          "",            // {string} the font color.
                "textDecoration":           "",            // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
                "image":                    "",         // {string} MediaEntity url
                "lineColor":                "#b3b3b3",     // {string} the color of the cell outline.
                "borderStyle":              "solid",       // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
                "borderWidth":              "1px",         // {string} the width of cell border in px.
                "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
                "fontStyle":                "normal",      // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
                "fontSize":                 "11px",        // {string} font size.
                "fontWeight":               "normal"       // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
            },
            "tableHeaderStyle":              {
                "backgroundColor":          "#202020",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#ffffff",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "#c0c0c0",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "11px",
                "fontWeight":               "bold"
            },
            "rowBorderStyle":                {
                "backgroundColor":          "",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               "",
                "fontStyle":                "",
                "fontSize":                 "",
                "fontWeight":               ""

            },
            "cellBorderStyle":               {
                "backgroundColor":          "",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "",
                "textDecoration":           "underline",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "2px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "11px",
                "fontWeight":               "bold"
            },
            "rowBackgroundStyle":            {
                "backgroundColor":          "",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "",
                "textDecoration":           "underline",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "2px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "11px",
                "fontWeight":               ""
            },
            "rowAlternateBackgroundStyle":   {
                "backgroundColor":          "#f5f5f5",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "",
                "fontFamily":               "",
                "fontStyle":                "",
                "fontSize":                 "11px",
                "fontWeight":               ""
            },
            "rowHoverStyle":                 {
                "backgroundColor":          "#dddddd",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#333333",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "11px",
                "fontWeight":               "normal"
            },
            "rowSelectedStyle":              {
                "backgroundColor":          "#0088cc",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#ffffff",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "11px",
                "fontWeight":               "bold"
            },
            "paginationButtonStyle": {
                "backgroundColor":          "",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#202020",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "12px",
                "fontWeight":               "bold"
            },
            "paginationHoverStyle": {
                "backgroundColor":          "#252525",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#ffffff",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "12px",
                "fontWeight":               "bold"
            },
            "paginationSelectedStyle": {
                "backgroundColor":          "#0088cc",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#ffffff",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "12px",
                "fontWeight":               "bold"
            },
            "toolbarStyle": {
                "backgroundColor":          "#fafafa",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "#202020",
                "textDecoration":           "",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "12px",
                "fontWeight":               ""
            },
            "rowFormatterStyle":             {
                "backgroundColor":          "#636262",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "white",
                "textDecoration":           "underline",
                "image":                    "",
                "lineColor":                "black",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "normal",
                "fontSize":                 "14px",
                "fontWeight":               "bold"
            },
            "highSalaryStyle":                   {
                "backgroundColor":          "red",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "white",
                "textDecoration":           "underline",
                "image":                    "",
                "lineColor":                "red",
                "borderStyle":              "solid",
                "borderWidth":              "1px",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "italic",
                "fontSize":                 "12px",
                "fontWeight":               "bold"
            },
            "lowSalaryStyle":                {
                "backgroundColor":          "green",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "white",
                "textDecoration":           "underline",
                "image":                    "",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "",
                "fontFamily":               ["helvetica", "arial"],
                "fontStyle":                "italic",
                "fontSize":                 "12px",
                "fontWeight":               "bold"
            },
            "sortAscendingStyle":   {
                "backgroundColor":          "",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "",
                "textDecoration":           "",
                "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "",
                "fontFamily":               "",
                "fontStyle":                "",
                "fontSize":                 "",
                "fontWeight":               ""
            },
            "sortDescendingStyle":   {
                "backgroundColor":          "",
                "secondaryBackgroundColor": "",
                "foregroundColor":          "",
                "textDecoration":           "",
                "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
                "lineColor":                "",
                "borderStyle":              "",
                "borderWidth":              "",
                "fontFamily":               "",
                "fontStyle":                "",
                "fontSize":                 "",
                "fontWeight":               ""
            }
        },
        "search": {                                        // Optional search capabilities
            "multiColumn":  {                              // Optional global grid search control
                "enabled":  true,                          // {boolean} enable the grid search toolbar
                "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
            }
        },
        "resetButton": {                                   // Optional cookie reset button to clear all user specific grid settings
            "enabled": false,                              // {boolean} enable the reset button to make it appear in grid.
            "location": "top-right"                        // {string} location of the reset button. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
        }
    };
    return configuration;
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetEmployeeRoleBasedData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[// result: INFOTABLE dataShape: EntityList
var params = {
    infoTableName: undefined /* STRING */
};

// result: INFOTABLE
var result = Resources["InfoTableFunctions"].CreateInfoTable(params);


//Add a new field to the InfoTable:
result.AddField({name: "name", baseType: "STRING"});
result.AddField({name: "title", baseType: "STRING"});
result.AddField({name: "office", baseType: "STRING"});
result.AddField({name: "id", baseType: "NUMBER"});

if(Role === 'CEO') {
    result.AddField({name: "hiredate", baseType: "STRING"});
    result.AddField({name: "salary", baseType: "NUMBER"});
}
// add data row
var data =
{
    "data": [
        [
            "Tiger Nixon",
            "System Architect",
            "Edinburgh",
            "5421",
            "2011/04/25",
            320800
        ],
        [
            "Garrett Winters",
            "Accountant",
            "Tokyo",
            "8422",
            "2011/07/25",
            170750
        ],
        [
            "Ashton Cox",
            "Junior Technical Author",
            "San Francisco",
            "1562",
            "2009/01/12",
            86000
        ],
        [
            "Cedric Kelly",
            "Senior Javascript Developer",
            "Edinburgh",
            "6224",
            "2012/03/29",
            433060
        ],
        [
            "Airi Satou",
            "Accountant",
            "Tokyo",
            "5407",
            "2008/11/28",
            162700
        ],
        [
            "Brielle Williamson",
            "Integration Specialist",
            "New York",
            "4804",
            "2012/12/02",
            372000
        ],
        [
            "Herrod Chandler",
            "Sales Assistant",
            "San Francisco",
            "9608",
            "2012/08/06",
            137500
        ],
        [
            "Rhona Davidson",
            "Integration Specialist",
            "Tokyo",
            "6200",
            "2010/10/14",
            327900
        ],
        [
            "Colleen Hurst",
            "Javascript Developer",
            "San Francisco",
            "2360",
            "2009/09/15",
            205500
        ],
        [
            "Sonya Frost",
            "Software Engineer",
            "Edinburgh",
            "1667",
            "2008/12/13",
            103600
        ],
        [
            "Jena Gaines",
            "Office Manager",
            "London",
            "3814",
            "2008/12/19",
            90560
        ],
        [
            "Quinn Flynn",
            "Support Lead",
            "Edinburgh",
            "9497",
            "2013/03/03",
            344000
        ],
        [
            "Charde Marshall",
            "Regional Director",
            "San Francisco",
            "6741",
            "2008/10/16",
            470600
        ],
        [
            "Haley Kennedy",
            "Senior Marketing Designer",
            "London",
            "3597",
            "2012/12/18",
            313500
        ],
        [
            "Tatyana Fitzpatrick",
            "Regional Director",
            "London",
            "1965",
            "2010/03/17",
            385750
        ],
        [
            "Michael Silva",
            "Marketing Designer",
            "London",
            "1581",
            "2012/11/27",
            198500
        ],
        [
            "Paul Byrd",
            "Chief Financial Officer (CFO)",
            "New York",
            "3059",
            "2010/06/09",
            725000
        ],
        [
            "Gloria Little",
            "Systems Administrator",
            "New York",
            "1721",
            "2009/04/10",
            237500
        ],
        [
            "Bradley Greer",
            "Software Engineer",
            "London",
            "2558",
            "2012/10/13",
            132000
        ],
        [
            "Dai Rios",
            "Personnel Lead",
            "Edinburgh",
            "2290",
            "2012/09/26",
            217500
        ],
        [
            "Jenette Caldwell",
            "Development Lead",
            "New York",
            "1937",
            "2011/09/03",
            345000
        ],
        [
            "Yuri Berry",
            "Chief Marketing Officer (CMO)",
            "New York",
            "6154",
            "2009/06/25",
            675000
        ],
        [
            "Caesar Vance",
            "Pre-Sales Support",
            "New York",
            "8330",
            "2011/12/12",
            106450
        ],
        [
            "Doris Wilder",
            "Sales Assistant",
            "Sidney",
            "3023",
            "2010/09/20",
            85600
        ],
        [
            "Angelica Ramos",
            "Chief Executive Officer (CEO)",
            "London",
            "5797",
            "2009/10/09",
            1200000
        ],
        [
            "Gavin Joyce",
            "Developer",
            "Edinburgh",
            "8822",
            "2010/12/22",
            92575
        ],
        [
            "Jennifer Chang",
            "Regional Director",
            "Singapore",
            "9239",
            "2010/11/14",
            357650
        ],
        [
            "Brenden Wagner",
            "Software Engineer",
            "San Francisco",
            "1314",
            "2011/06/07",
            206850
        ],
        [
            "Fiona Green",
            "Chief Operating Officer (COO)",
            "San Francisco",
            "2947",
            "2010/03/11",
            850000
        ],
        [
            "Shou Itou",
            "Regional Marketing",
            "Tokyo",
            "8899",
            "2011/08/14",
            163000
        ],
        [
            "Michelle House",
            "Integration Specialist",
            "Sidney",
            "2769",
            "2011/06/02",
            95400
        ],
        [
            "Suki Burks",
            "Developer",
            "London",
            "6832",
            "2009/10/22",
            114500
        ],
        [
            "Prescott Bartlett",
            "Technical Author",
            "London",
            "3606",
            "2011/05/07",
            145000
        ],
        [
            "Gavin Cortez",
            "Team Leader",
            "San Francisco",
            "2860",
            "2008/10/26",
            235500
        ],
        [
            "Martena Mccray",
            "Post-Sales support",
            "Edinburgh",
            "8240",
            "2011/03/09",
            324050
        ],
        [
            "Unity Butler",
            "Marketing Designer",
            "San Francisco",
            "5384",
            "2009/12/09",
            85675
        ],
        [
            "Howard Hatfield",
            "Office Manager",
            "San Francisco",
            "7031",
            "2008/12/16",
            164500
        ],
        [
            "Hope Fuentes",
            "Secretary",
            "San Francisco",
            "6318",
            "2010/02/12",
            109850
        ],
        [
            "Vivian Harrell",
            "Financial Controller",
            "San Francisco",
            "9422",
            "2009/02/14",
            452500
        ],
        [
            "Timothy Mooney",
            "Office Manager",
            "London",
            "7580",
            "2008/12/11",
            136200
        ],
        [
            "Jackson Bradshaw",
            "Director",
            "New York",
            "1042",
            "2008/09/26",
            645750
        ],
        [
            "Olivia Liang",
            "Support Engineer",
            "Singapore",
            "2120",
            "2011/02/03",
            234500
        ],
        [
            "Bruno Nash",
            "Software Engineer",
            "London",
            "6222",
            "2011/05/03",
            163500
        ],
        [
            "Sakura Yamamoto",
            "Support Engineer",
            "Tokyo",
            "9383",
            "2009/08/19",
            139575
        ],
        [
            "Thor Walton",
            "Developer",
            "New York",
            "8327",
            "2013/08/11",
            98540
        ],
        [
            "Finn Camacho",
            "Support Engineer",
            "San Francisco",
            "2927",
            "2009/07/07",
            87500
        ],
        [
            "Serge Baldwin",
            "Data Coordinator",
            "Singapore",
            "8352",
            "2012/04/09",
            138575
        ],
        [
            "Zenaida Frank",
            "Software Engineer",
            "New York",
            "7439",
            "2010/01/04",
            125250
        ],
        [
            "Zorita Serrano",
            "Software Engineer",
            "San Francisco",
            "4389",
            "2012/06/01",
            115000
        ],
        [
            "Jennifer Acosta",
            "Junior Javascript Developer",
            "Edinburgh",
            "3431",
            "2013/02/01",
            75650
        ],
        [
            "Cara Stevens",
            "Sales Assistant",
            "New York",
            "3990",
            "2011/12/06",
            145600
        ],
        [
            "Hermione Butler",
            "Regional Director",
            "London",
            "1016",
            "2011/03/21",
            356250
        ],
        [
            "Lael Greer",
            "Systems Administrator",
            "London",
            "6733",
            "2009/02/27",
            103500
        ],
        [
            "Jonas Alexander",
            "Developer",
            "San Francisco",
            "8196",
            "2010/07/14",
            86500
        ],
        [
            "Shad Decker",
            "Regional Director",
            "Edinburgh",
            "6373",
            "2008/11/13",
            183000
        ],
        [
            "Michael Bruce",
            "Javascript Developer",
            "Singapore",
            "5384",
            "2011/06/27",
            183000
        ],
        [
            "Donna Snider",
            "Customer Support",
            "New York",
            "4226",
            "2011/01/25",
            112000
        ]
    ]
}

var i=0;
for(i=0; i<data.data.length; i++) {
    var employee = data.data[i];
        result.AddRow({
                          'name' : employee[0],
                          'title' : employee[1],
                          'office' : employee[2],
                          'id' : employee[3],
                          'hiredate' : employee[4],
                          'salary' : employee[5]
                      });
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetPartsConfiguration"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/*
 USE CASE: Parts Data
 This example shows hierarchical parts data that is loaded by the tree-advanced-grid as a tree structure when you specify
 the parentId, id and hasChildren columns appropriately.

 ThingWorx Configuration setup for this example:

 1) Create a Thing 'PartsManager' with a service called 'getPartsConfiguration' that contains the content of this file.
 2) Create a DataShape 'PartsDataShape' with part fields and the 'id' field as the primary key.
 3) Create a Parts DataTable 'PartsTable' based on the 'PartsDataShape'
 4) Create a another service on the 'PartsManager' called 'initPartsTable' and past the content of the 'init-parts-table.js' in it.
 5) Test the 'initPartsTable' service to initialize the parts table with the number of rows per grid and the number of nested levels.
 NOTE: limit the nesting levels to 3.
 6) Verify content of the table by Testing the getDataTableEntries service on the PartsTable DataTable.
 7) Bind the getDataTableEntries service to the Data property on the grid.
 8) Create a service on the 'PartsManager' called 'getPartsChildData' and copy/paste the content of 'parts-info-data.js' in that
 9) Bind the 'getPartsChildData' to the 'ChildData' property of the grid.
 */

var result = {
    "columns":    {                                     // Required
        "idFieldName": "id",                            // {string} Required. The name of the 'id' column containing the primary key.
        "header":       {                               // Optional
            "titleCase":   "",                          // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
            "overflow":    "wrapped"                    // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
        },
        "columnDefs":   [                               // Optional
            {
                "targets":             0,               // {integer} the index of the column to which this data applies.
                "fieldName":           "key",           // {string} the data field name.
                "title":               "Key",           // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             1,               // {integer} the index of the column to which this data applies.
                "fieldName":           "location",      // {string} the data field name.
                "title":               "Location",      // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             2,               // {integer} the index of the column to which this data applies.
                "fieldName":           "source",        // {string} the data field name.
                "title":               "Source",        // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             3,               // {integer} the index of the column to which this data applies.
                "fieldName":           "sourceType",    // {string} the data field name.
                "title":               "Source Type",   // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             4,               // {integer} the index of the column to which this data applies.
                "fieldName":           "tags",          // {string} the data field name.
                "title":               "Tags",          // *{string} the column display name.
                "width":               "20px",          // *{string} the column width in px. Options: '*' (auto-width) or a number.
                "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
                "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
                "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                "hidden":              true,            // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                "inLayout":            false
            },
            {
                "targets":             5,
                "fieldName":           "timestamp",
                "title":               "Timestamp",
                "width":               "150px",
                "autoWidth":           false,
                "overflow":            "wrapped",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            false,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "datetime",
                    "format":          "yyyy-MM-dd HH:mm:ss.SSS"
                }
            },
            {
                "targets":             6,
                "fieldName":           "parentId",
                "title":               "Parent Id",
                "width":               "250px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full"
                }
            },
            {
                "targets":             7,
                "fieldName":           "id",
                "title":               "Id",
                "width":               "250px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full"
                }
            },
            {
                "targets":             8,
                "fieldName":           "name",
                "title":               "Name",
                "width":               "150px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full"
                }
            },
            {
                "targets":             9,
                "fieldName":           "number",
                "title":               "Number",
                "width":               "150px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "full"
                }
            },
            {
                "targets":             10,
                "fieldName":           "orderDate",
                "title":               "Order Date",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "datetime",
                    "format":          "yyyy-MM-dd HH:mm:ss.SSS"
                }
            },
            {
                "targets":             11,
                "fieldName":           "quantity",
                "title":               "Quantity",
                "width":               "50px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "integer",
                    "format":          "0"
                }
            },
            {
                "targets":             12,
                "fieldName":           "cost",
                "title":               "Cost",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "number",
                    "format":          "0.00"
                }
            },
            {
                "targets":             13,
                "fieldName":           "backOrder",
                "title":               "On Back Order?",
                "width":               "100px",
                "autoWidth":           true,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            true,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "boolean",
                    "format":          "text"
                }
            },
            {
                "targets":             14,
                "fieldName":           "hasChildren",
                "title":               "Has Children",
                "width":               "100px",
                "autoWidth":           false,
                "overflow":            "ellipsis",
                "headerTextAlignment": "center",
                "textAlignment":       "left",
                "hidden":              false,
                "inLayout":            false,
                "description":         "....",
                "columnFormatter":     {
                    "type":            "string",
                    "format":          "text"           // Specify whether to use the top-level 'top' or 'child' Data and Configuration services. Options: 'top' 'child'
                }
            }
        ],
        "enableSorting":    true,                       // Optional. Enable sorting capabilities for the grid.
        "multiColumnSortOrder": [                       // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
            {
                "id":         'name',                   // {int} column index
                "direction":  'asc'                     // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
            }
        ]
    },
    "rows":       {                                     // Optional
        "selection":                  "multi",          // *{string} row selection setting. Options: 'none, 'single', 'multi'
        "defaultSelectedRows":        "",               // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
        "minHeight":                  "30",             // {string} row height setting in px.
        "autoScroll":                 true,             // {boolean} scroll to the selected rows on update or resize
        "rowFormatter": {                               // Optional. Format entire row based on a fixed style or state definition.
            "stateDefinition": {                        // Required
                "name":      "BackOrder",               // {string} name of the state definition.
                "fieldName": "backOrder",                   // {string} name of the column data field.
                "type":      "not-fixed",               // {string} type of state definition. Options 'fixed', 'not-fixed'.
                "states":    [                          // Required
                    {
                        "name":       "OnBackOrder",                    // {string} the name of the state
                        "value":      true,                             // {*} the value of the state that needs to match the fieldName value.
                        "comparator": "==",                             // {string} the comparator. Options: '==', '<', '>', '<=', '>=', '!='
                        "styleName":  "rowFormatterStyle"               // {string} the name of the style to apply from the list of styles below when state matches.
                    }
                ]
            }
        }
    }
    ,
    "styles":     {                                    // Optional unless styles are defined in state formatters
        "tableWrapperStyle":              {            // {string} name of the style.
            "backgroundColor":          "#e6e6e6",     // {string} the background style color
            "secondaryBackgroundColor": "",            // {string} the secondary background style color for a gradient.
            "foregroundColor":          "",            // {string} the font color.
            "textDecoration":           "",            // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
            "image":                    "url",         // {string} MediaEntity url
            "lineColor":                "#b3b3b3",     // {string} the color of the cell outline.
            "borderStyle":              "solid",       // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
            "borderWidth":              "1px",         // {string} the width of cell border in px.
            "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
            "fontStyle":                "normal",      // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
            "fontSize":                 "11px",        // {string} font size.
            "fontWeight":               "normal"       // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
        },
        "tableHeaderStyle":              {
            "backgroundColor":          "#202020",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "url",
            "lineColor":                "#c0c0c0",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "rowBorderStyle":                {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "cellBorderStyle":               {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "2px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "rowBackgroundStyle":            {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "2px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               ""
        },
        "rowAlternateBackgroundStyle":   {
            "backgroundColor":          "#f5f5f5",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "11px",
            "fontWeight":               ""
        },
        "rowHoverStyle":                 {
            "backgroundColor":          "#dddddd",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#333333",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "normal"
        },
        "rowSelectedStyle":              {
            "backgroundColor":          "#0088cc",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "11px",
            "fontWeight":               "bold"
        },
        "paginationButtonStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#202020",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "paginationHoverStyle": {
            "backgroundColor":          "#252525",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "paginationSelectedStyle": {
            "backgroundColor":          "#0088cc",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#ffffff",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "toolbarStyle": {
            "backgroundColor":          "#fafafa",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "#202020",
            "textDecoration":           "",
            "image":                    "",
            "lineColor":                "",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "12px",
            "fontWeight":               ""
        },
        "rowFormatterStyle":             {
            "backgroundColor":          "#636262",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "black",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "normal",
            "fontSize":                 "14px",
            "fontWeight":               "bold"
        },
        "sortAscendingStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "sortDescendingStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowExpansionIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowExpansionIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "rowCollapseIconStyle": {
            "backgroundColor":          "",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "",
            "textDecoration":           "",
            "image":                    "/Thingworx/MediaEntities/GridRowCollapseIcon",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               "",
            "fontStyle":                "",
            "fontSize":                 "",
            "fontWeight":               ""
        },
        "highSalaryStyle":                   {
            "backgroundColor":          "red",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "red",
            "borderStyle":              "solid",
            "borderWidth":              "1px",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "italic",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "lowSalaryStyle":                {
            "backgroundColor":          "green",
            "secondaryBackgroundColor": "",
            "foregroundColor":          "white",
            "textDecoration":           "underline",
            "image":                    "url",
            "lineColor":                "",
            "borderStyle":              "",
            "borderWidth":              "",
            "fontFamily":               ["helvetica", "arial"],
            "fontStyle":                "italic",
            "fontSize":                 "12px",
            "fontWeight":               "bold"
        },
        "cellValidationErrorStyle":             {
          "backgroundColor":          "",
          "secondaryBackgroundColor": "",
          "foregroundColor":          "black",
          "textDecoration":           "none",
          "image":                    "",
          "lineColor":                "red",
          "borderStyle":              "solid",
          "borderWidth":              "1px",
          "fontFamily":               ["helvetica", "arial"],
          "fontStyle":                "normal",
          "fontSize":                 "11px",
          "fontWeight":               "normal"
        },
        "cellValidationErrorTooltipStyle":             {
          "backgroundColor":          "red",
          "secondaryBackgroundColor": "",
          "foregroundColor":          "white",
          "textDecoration":           "none",
          "image":                    "",
          "lineColor":                "white",
          "borderStyle":              "solid",
          "borderWidth":              "1px",
          "fontFamily":               ["helvetica", "arial"],
          "fontStyle":                "normal",
          "fontSize":                 "11px",
          "fontWeight":               "normal"
        },
        "tooltipStyle": {
          "backgroundColor":          "#0000ff",
          "secondaryBackgroundColor": "",
          "foregroundColor":          "#ffffff",
          "textDecoration":           "",
          "image":                    "",
          "lineColor":                "",
          "borderStyle":              "none",
          "borderWidth":              "",
          "fontFamily":               ["helvetica", "arial"],
          "fontStyle":                "normal",
          "fontSize":                 "12px",
          "fontWeight":               ""        
        },
    },
    "search": {                                        // Optional search capabilities
        "multiColumn":  {                              // Optional global grid search control
            "enabled":  true,                          // {boolean} enable the grid search toolbar
            "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
        }
    },
    "resetButton": {                                   // Optional reset button that allows the end-user to reset the user specific grid settings. It clears all the grid cookie values.
        "enabled": true,                               // {boolean} show the reset button in the Mashup.
        "location": "top-right"                        // {string} Location of the reset button. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
    },
    "treeSettings": {                                  // Required for Tree Grid.
        "parentIdFieldName": "parentId",               // {string} The grid column that contains the parent ID
        "hasChildrenFieldName": "hasChildren",         // {string} The grid column that contains the information whether the row has children or not. Value options: "1" or "0".
        "maxRowCacheSize": 100000,                     // {integer} The total number of rows that can be cached client side. A warning message is shown when cache limit is reached, user will need to close nodes or refresh browser at that point.
        "expandAllLoadedLevels": false,                // {boolean} Specifies whether to expand all the initially loaded rows.
        "preserveRowExpansion": false,                 // {boolean} Specifies whether row expansions should be persisted in a user specific cookie.
        "expandRowOnDoubleClick": false,               // {boolean} Specifies whether the row should be expanded when double clicked.
        "includeRowExpansionParents": false,           // {boolean} Fetch parent rows of expanded or selected rows that are not pre-loaded.
        "idPathSeparator": ':;'                        // {string} The ID path separator that is used in ID paths for the selection of non-loaded rows.
    }
};


]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetPartsData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * This is an Example service to load child data for the 'Parts' tree grid.
 *
 * NOTE: The API as described below is REQUIRED in order for the Tree-Grid-Advanced to operate properly for the set of
 * advanced features like, sorting, filtering, searching, dynamic child loading and node expansion.
 *
 * Developers can use this javascript code to include in their services as is or use pieces from it to support the features
 * in the Tree-Grid-Advanced that they would like to use in their Mashups. These sample API implementations can also be used as an example
 * to convert them into a java-based service when necessary as long as the input parameter names remain the same and the
 * returned {InfoTable} contains the correct listing of rows for each listed API.
 *
 * IMPORTANT: Top-level or root node rows that do not have a parent row should have a 'parentId' value of '/' indicating 'root-level'.
 * Update the ROOT_ID_VALUE parameter to any other non-empty string value, e.g. '//' or ' ';
 *
 *
 * Requires the following input parameters:
 * 'id'                 {string}  row id
 * 'rowsPerLevel'       {number}  the number of rows that should be returned per level. Maximum: 100K (total rows on client cannot exceed 100K)
 * 'maxLevels'          {number}  the number of tree levels that can be returned. Maximum: 10
 * 'leafId'             {string}  the id of the leaf node when searching for a child node.
 * 'includesParents'    {boolean} true to return search results as a tree, false to return as a flat list of all matching rows.
 * 'query'              {query}   the query for searching and sorting the data
 *
 *
 *
 * Grid REQUIRED API's:
 * 1) Fetch hierarchical grid data based on the specified number tree levels. This will pre-load N levels of grid data into the grid.
 *    @param {maxLevels} the number of levels of tree-data that should be returned.
 *    @param {rowsPerLevel} specifies how many child rows should be included per node per level.
 *    @return {InfoTable} with the list of hierarchical tree data.
 *
 * 2) Fetch Child Data for a Node
 *    @param {id} the id of the row for which the child rows should be returned.
 *    @param {rowsPerLevel} specifies how many child rows should be included.
 *    @return {InfoTable} with the list of child rows.
 *
 * 3) Sort Data
 *    @param {id} (optional) the id of the row for which the child rows should be returned in sorted fashion. If not provided
 *    all data is assumed.
 *    @param {query} containing the multi-column sort field names. This query object is automatically
 *    generated by the Grid-Advanced widget.
 *    @param {rowsPerLevel} specifies how many child rows should be included.
 *    @return {InfoTable} with the sorted data
 *
 * 4) Search Data, (search for specified query string in each column of the grid):
 *    @param: {query} containing the search field names for each column with the search string parameter.
 *    This query object is automatically generated by the Grid-Advanced widget.
 *    @param: {includesParents} boolean parameter indicating whether the parent rows of the matched rows should
 *    be returned as well
 *    @param {rowsPerLevel} specifies how many child rows should be included.
 *    @return: {infoTable} containing the rows that contain a field that matches the specifed search string.
 *
 * 5) Sort & Search combined
 *    @param: {query} containing the multi-column sort field names and the search field names for each
 *    column with the search string parameter. This query object is automatically generated by the Grid-Advanced widget.
 *    @param {rowsPerLevel} specifies how many child rows should be included.
 *    @return {InfoTable} with sorted, filtered data
 *
 * 6) Filter Data rows (this can be combined with Sort & Search [5])
 *    @param: {filterQuery} containing the query object from a DataFilter widget. In order to combine
 *    filtering with searching and sorting, the query objects need to combined into a single query object before querying
 *    the Data Source. This is done in this example.
 *    @param: {includesParents} boolean parameter indicating whether the parent rows of the matched rows should
 *    be returned as well
 *    @param {rowsPerLevel} specifies how many child rows should be included.
 *    @return {infoTable} with filtered data.
 *
 * 7) Expand Node
 *    @param: {leafId} the id of the row that should be expanded.
 *    @return: {InfoTable} containing the minimum set of rows required, including all parent rows, to show and expand the node
 *
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// YOUR DATA STORE, e.g. DataTable, Stream etc ACCESS HERE:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Specify your data-table name:
var YOUR_DATATABLE_THING = 'PartsTable';

// Update the following variables to point to the appropriate columns in your DataTable:
var ID_FIELD_NAME = 'id';
var PARENT_ID_FIELD_NAME = 'parentId';
var ROOT_ID_VALUE = '/';

/**
 * Update this function to query your data-store with the provided Query parameters and return an InfoTable with the
 * found rows. The other code in this file provides the necessary tree operations to include the appropriate number of
 * tree levels and optional parent rows when requested.
 * @param {object} params Params object containing filters and sorts
 * @return {InfoTable} representing the infotable returned
 */
function getEntriesFromDataStore(params) {
    return Things[YOUR_DATATABLE_THING].QueryDataTableEntries(params);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


var MAX_ROWS = 100000;
var MAX_LEVELS = 25;
var errors = 0;

// validation
if (maxLevels === undefined || maxLevels <= 0 || maxLevels > 25) {
    throw '"maxLevels" needs to be larger than 0 and less or equal to 25';
}
if (rowsPerLevel === undefined || rowsPerLevel <= 0 || rowsPerLevel > MAX_ROWS) {
    throw '"rowsPerLevel" needs to be larger than 0 and less than or equal to 100,000';
}
if (id && findRow(id) === undefined) {
    logger.error('Could not find row with id "' + id + '"');
    errors++;
}
if (leafId && findRow(leafId) === undefined) {
    logger.error('Could not find row with id "' + id + '"');
    errors++;
}

includesParents = includesParents === undefined ? true : includesParents; // set default to true


var result;
var resultLevels = [];
if (errors === 0){
    main();
}

/**
 * Starting function to retrieve and parse the resulting data to a proper JSON infotable
 */
function main() {
    if (leafId === undefined || leafId.trim().length === 0) {
        // if 'id' is undefined this is a root level request
        // if 'id' is defined this is expanding a child
        if (includesParents && hasSearchQuery(query) && maxLevels === undefined) {
            maxLevels = MAX_LEVELS;
        }
        requestLevel(id, maxLevels, (includesParents && hasSearchQuery(query)));
    } else {
        // node selection
        includesParents = true; // leaf expansion always includes parents
        requestLevel(leafId, maxLevels, includesParents); // retrieve the leaf and only its parents
        var ids = getIdsForNextLevel(resultLevels.reduce(function(arr, level){
            return arr.concat(level);
        },[]));// determine the entire node address
        resultLevels = []; // wipe it clean as we are retrieving a new list
        requestLevel(ids, 1, false); // retrieve all the siblings of each level in the node address
    }
    if (id === undefined) {
        // remove incomplete branches
        if (includesParents && hasSearchQuery(query)) {
            // cleanup the data so we only have complete branches.
            // depending on the maxLevels specified this could result in branches not making their way to the root level
            resultLevels = cleanupBranches(resultLevels.reverse(), true).reverse();
        } else {
            resultLevels = cleanupBranches(resultLevels, false);
        }
    }
    // convert resultLevels to final result;
    result.rows = [];
    resultLevels.forEach(function(level) {
        result.rows = result.rows.concat(level);
    });
}

/**
 * Removes any branches that are beyond maxLevels deep
 * @param levelsArray
 * @param requiresRoot
 * @return {Array.<*>} Array of arrays containing the rows for each level
 */
function cleanupBranches(levelsArray, requiresRoot){
    var totalRowCount = 0;
    var cleanedLevels = [];
    var levelIdMap = [];
    var levelRowCountObj = {}; // keeps track of the number of rows per node
    levelsArray.forEach(function(level, index) {
        var cleanedLevel;
        if (index === 0) {
            cleanedLevel = level.filter(function(row) {
                levelRowCountObj[row[PARENT_ID_FIELD_NAME]] = levelRowCountObj[row[PARENT_ID_FIELD_NAME]] || 0;
                return (((row[PARENT_ID_FIELD_NAME] === ROOT_ID_VALUE || row[PARENT_ID_FIELD_NAME] === undefined) && requiresRoot) || !requiresRoot)
                    && (totalRowCount < MAX_ROWS && ++totalRowCount) // Stop saving rows that exceed the max row count
                    && (levelRowCountObj[row[PARENT_ID_FIELD_NAME]] < rowsPerLevel && ++levelRowCountObj[row[PARENT_ID_FIELD_NAME]]); // stop saving rows that exceed the max level count
            });
        } else {
            cleanedLevel = level.filter(function(row) {
                levelRowCountObj[row[PARENT_ID_FIELD_NAME]] = levelRowCountObj[row[PARENT_ID_FIELD_NAME]] || 0;
                return (levelIdMap.indexOf(row[PARENT_ID_FIELD_NAME]) >= 0)
                    && (totalRowCount < MAX_ROWS && ++totalRowCount) // Stop saving rows that exceed the max row count
                    && (levelRowCountObj[row[PARENT_ID_FIELD_NAME]] < rowsPerLevel && ++levelRowCountObj[row[PARENT_ID_FIELD_NAME]]); // stop saving rows that exceed the max level count
            });
        }
        levelIdMap = cleanedLevel.map(function(row) {
            return row[ID_FIELD_NAME];
        });
        cleanedLevels.push(cleanedLevel);
    });
    return cleanedLevels;
}

/**
 * Recursively retrieves each level of data
 * @param {String} _ids list of ids to search for
 * @param {Number} level the number of levels left in the tree
 * @param {Boolean} getParentRows determines if the query should look for parentId or id
 */
function requestLevel(_ids, level, getParentRows) {
    var requestQuery = generateQuery(_ids, query, maxLevels === level && leafId === undefined ? false : getParentRows);
    var params = {
        maxItems: MAX_ROWS,
        query: requestQuery
    };

    try {
        var entries = getEntries(params);
        var levelRowCount = {};
        var pagedEntries = [];
        entries.rows.forEach(function(row) {
            var parentId = row[PARENT_ID_FIELD_NAME];
            levelRowCount[parentId] = levelRowCount[parentId] ? levelRowCount[parentId] + 1 : 1;
            if(levelRowCount[parentId] && levelRowCount[parentId] <= rowsPerLevel) {
                pagedEntries.push(row);
            }
        });
        entries.rows = pagedEntries;

    } catch (error) {
        logger.error('Failed retrieving data: ' + error);
    }

    // make sure it has the definitions in place
    if (result === undefined) {
        result = entries;
    }
    resultLevels.push(entries.rows);

    if (level > 1 && entries.rows.length > 0) {
        // if we are search and want a tree of results we need to find the parents of each result for maxLevel rows
        if (getParentRows) {
            var ids = getIdsForParents(entries.rows);
            if(ids.length === 0){
                return; // we've hit the end and can't continue
            }
            requestLevel(ids, level - 1, true);
        } else {
            requestLevel(getIdsForNextLevel(entries.rows), level - 1, false);
        }
    }
}

/**
 * Creates a string of ids that should be retrieved in the next request
 * @param {Array} rows
 * @return {String} string of ids separated by '_'
 */
function getIdsForParents(rows) {
    return rows.filter(function(row) {
        var parentId = row[PARENT_ID_FIELD_NAME];
        return parentId !== undefined && parentId !== ROOT_ID_VALUE;
    }).map(function(row) {
        return row[PARENT_ID_FIELD_NAME];
    }).join(':;');
}

/**
 * Creates a string of ids that should be retrieved in the next request
 * @param {Array} rows
 * @return {String} string of ids separated by '_'
 */
function getIdsForNextLevel(rows) {
    return rows.map(function(row) {
        return row[ID_FIELD_NAME];
    }).join(':;');
}

/**
 * Queries the datatable with the given params
 * @param {object} params Params object containing filters and sorts
 * @return {string} JSON string representing the infotable returned
 */
function getEntries(params) {
    var entries = getEntriesFromDataStore(params);
    return JSON.parse(entries.ToJSON());
}

// Methods to build the query below

/**
 * Entry point to create the query object depending on the bound query objects
 * @param {string} ids list to query for
 * @param {query} queryParam the bound search/sort query object
 * @param {boolean} getParentRows boolean to help determine if the search query should be included or not
 */
function generateQuery(ids, queryParam, getParentRows) {
    // create a copy of gridQuery to retain the sort and search properties but not introduce old node ids
    var filters = [],
        sortQuery;
    if (getParentRows === false && hasSearchQuery(queryParam)) { // if we are finding parent nodes we want to ignore the search query
        filters.push(generateSearchQuery(queryParam));
    }
    filters.push(generateRowQuery(ids, queryParam, getParentRows));
    sortQuery = generateSortQuery(queryParam);

    return buildQuery(filters, sortQuery);
}

/**
 * Combines the list of filters into 1 query object
 * @param {Array} filters for each query being made
 * @param {query} sortQuery the json sort query that was created
 * @return {object} the json object containing all necessary filters/sorts for the next request
 */
function buildQuery(filters, sortQuery) {
    var filter = {
        filters: {
            type: 'AND',
            filters: filters.filter(function(filter) {
                return filter !== undefined;
            })
        }
    };
    if (sortQuery !== undefined) {
        filter.sorts = sortQuery;
    }
    //logger.info("QUERY: " + JSON.stringify(filter));
    return filter;
}

/**
 * Builds the query for determining which ids to request
 * @param {string} ids list of ids to request
 * @param {query} queryParam query param this service is bound to
 * @param {boolean} getParentRows determines if we are moving up or down the tree
 * @return {object} filters containing the ids to request
 */
function generateRowQuery(ids, queryParam, getParentRows) {
    if (ids === undefined && hasSearchQuery(queryParam)) {
        return;
    }
    var filters = [];
    if (ids === undefined) {
        filters.push({
                         fieldName: PARENT_ID_FIELD_NAME,
                         type: 'LIKE',
                         value: ROOT_ID_VALUE
                     });
    } else {
        ids.split(':;').forEach(function(id) {
            if (id && id.trim().length > 0) {
                filters.push({
                                 fieldName: getParentRows ? ID_FIELD_NAME : PARENT_ID_FIELD_NAME,
                                 type: 'LIKE',
                                 value: id
                             });
            }
        });
    }
    return {
        type: 'OR',
        filters: filters
    };
}

/**
 * Builds a query based on the search filter
 * NOTE: there is an issue with the Rhino interpreter accessing arrays, hence recreating the array from scratch
 * @param {query} query param this service is bound to
 * @return {object} filters containing the search filter
 */
function generateSearchQuery(query) {
    if (!hasSearchQuery(query)) {
        return;
    }
    if(query.filters.filters){
        return {
            type: query.filters.type || 'AND',
            filters: createFilters(query.filters.filters)
        };
    }else{
        return {
            fieldName: query.filters.fieldName,
            type: query.filters.type,
            value: query.filters.value
        }
    }
}

/**
 * Builds the sort query
 * NOTE: there is an issue with the Rhino interpreter accessing arrays, hence recreating the array from scratch
 * @param {query} query param this service is bound to
 * @return {Array} array containing the sorts to apply to the query
 */
function generateSortQuery(query) {
    if (!hasSortQuery(query)) {
        return;
    }
    var mySorts = [];
    for (var i = 0; i < query.sorts.length; i++) {
        var mySort = {
            fieldName: query.sorts[i].fieldName,
            isAscending: query.sorts[i].isAscending
        };
        mySorts.push(mySort);
    }
    return mySorts;
}

/**
 * Converts the incoming json because of an issue with Rhino
 * NOTE: there is an issue with the Rhino interpreter accessing arrays, hence recreating the array from scratch
 * @param {Array} filters to convert
 * @return {Array}
 */
function createFilters(filters) {
    var myfilters = [];
    for (var i = 0; i < filters.length; i++) {
        if (filters[i].filters !== undefined) {
            myfilters.push(generateSearchQuery({filters: filters[i]}));
        }else {
            var myFilter = {
                fieldName: filters[i].fieldName,
                type: filters[i].type,
                value: filters[i].value
            };
            myfilters.push(myFilter);
        }
    }
    return myfilters;
}

/**
 * Checks the bound query param if search filters exist
 * @param {query} queryParam
 * @return {boolean}
 */
function hasSearchQuery(queryParam) {
    return (queryParam !== undefined && queryParam.filters !== undefined &&
    ((!Array.isArray(queryParam.filters)) || // an object of 1 filter
    (queryParam.filters.filters !== undefined && queryParam.filters.filters.length > 0))); // an array of multiple filters
}

/**
 * Checks the bound query param if sort filters exist
 * @param {query} queryParam
 * @return {boolean}
 */
function hasSortQuery(queryParam) {
    return (queryParam !== undefined && queryParam.sorts !== undefined && queryParam.sorts.length > 0);
}

/**
 * Find the row with the specified id
 * @param id
 * @returns {undefined}
 */
function findRow(id) {
    var params = {
        maxItems: 1,
        query: {
            filters: {
                fieldName: ID_FIELD_NAME,
                value:     id,
                type:      'EQ'
            }
        }
    };
    var entries = Things[YOUR_DATATABLE_THING].QueryDataTableEntries(params);
    return entries.length > 0 ? entries[0] : undefined;
}]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetPartsFooterData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * GetPartsFooterData service
 *
 * This is an Example service that creates an InfoTable with footer data for the Hierarchical Parts Grid Examples.
 *
 * @return {InfoTable} with footer data.
 **/
var result = createInfoTable();
/**
 * Create an InfoTable for your footer data
 * @returns {InfoTable} with data.
 */
function createInfoTable() {
    logger.info("TEST");
    var backOrder = getTotalOnBackOrder(); // Custom function to calculate your own info.
    var params = {
        infoTableName: undefined /* STRING */
    };
    var result = Resources["InfoTableFunctions"].CreateInfoTable(params);
    //Add field to the InfoTable, ensure same field names in this footer data as are used in the actual table data:
    result.AddField({name: "parentId", baseType: "STRING"});
    result.AddField({name: "id", baseType: "STRING"});
    result.AddField({name: "name", baseType: "STRING"});
    result.AddField({name: "number", baseType: "STRING"});
    result.AddField({name: "orderDate", baseType: "STRING"});
    result.AddField({name: "quantity", baseType: "STRING"});
    result.AddField({name: "cost", baseType: "STRING"});
    result.AddField({name: "backOrder", baseType: "STRING"});

    // You can also perform client side calculations in the grid using {#stat_count}, {#stat_max}, {#stat_min}, {#stat_average}, {#stat_total} functions.
    // {#stat_count}: counts the number of rows.
    // {#stat_max}: calculates the maximum client side value for the values in the column.
    // {#stat_min}: calculates the minimum client side value for the values in the column.
    // {#stat_average}: calculates the average client side value for the values in the column.
    // {#stat_total}: calculates the total client side value for the values in the column.
    // #cspan: span columns.
    // Or you can perform your own calculations in this service and add them to the footer as shown in the 'cold' column below.

    // NOTE: use HTML escaped char &#44; for comma's in text, the text following the comma is the alignment setting in this configuration which
    // is by default 'text-align:left;' or left-aligned:

    // Localization: You can localize your text in the footer by adding tokens to the LocalizationTables_Default.xml file in the provided extension. Put your token name inside square brackets: [[tokenName]]
    // and add the token to the xml file as a new row.
    result.AddRow({
        'parentId':		'[[totalUnits]], text-align:right;',
        'id':           '#cspan',
        'name':         '#cspan',
        'number':		'#cspan',
        'orderDate':	'#cspan',
        'quantity':		'{#stat_total}, text-align:left;',
        'cost':			'#cspan',
        'backOrder':    backOrder + '[[onBackOrder]]'
    });
    result.AddRow({
        'parentId':		'[[functionCalculations]],text-align:left;',
        'id':           '#cspan',
        'name':         '#cspan',
        'number':		'[[averageCost]], text-align:right;',
        'orderDate':	'#cspan',
        'quantity':		'',
        'cost':			'${#stat_average}',
        'backOrder':    '#cspan'
    });
	result.AddRow({
        'parentId':		'[[totalCost]], text-align:right;',
        'id':           '#cspan',
        'name':         '#cspan',
        'number':		'#cspan',
        'orderDate':	'#cspan',
        'quantity':		'',
        'cost':			'${#stat_total}',
        'backOrder':    '#cspan'
    });
    return result;
}

/**
* Custom function to make your own calculated values to put in the footer.
*/
function getTotalOnBackOrder() {
    var entries = Things["PartsTable"].GetDataTableEntries({maxItems: 12000});
    var total = 0;
    for (var i=0; i < entries.length; i++) {
        logger.info("ENTRY BACKORDER: " + entries[i].backOrder);
        logger.info("ID: " + entries[i].id);
        if (entries[i].backOrder === true) {
            total++;
        }
    }
    return total;
}

]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetWeatherConfiguration"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var result = {
  "enableFooter": false,
  "columns":    {                               // Required
    "idFieldName": "id",                        // {string} Required. The name of the 'id' column containing the primary key.
    "header":       {                           // Optional
      "titleCase":   "",                        // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
      "overflow":    "tooltip"                  // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
    },
    "columnDefs":   [                           // Optional. Column definitions for each column in the data InfoTable.
      {
        "targets":             0,               // {integer} the index of the column to which this data applies.
        "fieldName":           "id",            // {string} the data field name.
        "title":               "Id",            // *{string} the column display name.
        "width":               "100px",         // *{string} the column width in px. Options: '*' (auto-width) or a number.
        "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
        "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
        "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
        "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
        "hidden":              false,           // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "integer",
          "format":            "0"
        }
      },
      {
        "targets":             1,
        "fieldName":           "date",
        "title":               "Date",
        "width":               "50px",
        "autoWidth":           false,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "datetime",
          "format":            "MM.DD.YYYY"
        }
      },
      {
        "targets":             2,
        "fieldName":           "max_temp",
        "title":               "Max Temp",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":            "number",
          "format":          "0.00F",
          "params":            {
            "roundingEnabled": false          // *{boolean} parameter to disable rounding of 'number' type values. By default enabled.
          },
          "stateDefinition": {
            "name":      "OnOff",
            "fieldName": "events",
            "type":      "non-fixed",
            "states":    [
              {
                "name":       "Rain",
                "value":      "Snow",
                "comparator": "==",
                "styleName":  "snowFormatterStyle"
              },
              {
                "name":       "Fog",
                "value":      "Fog",
                "comparator": "==",
                "styleName":  "lowSalaryStyle"
              }
            ]
          }
        }
      },
      {
        "targets":             3,
        "fieldName":           "min_temp",
        "title":               "Min Temp",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "number",
          "format":            "0.00F"
        }
      },
      {
        "targets":             4,
        "fieldName":           "cold",
        "title":               "Cold?",
        "width":               "50px",
        "autoWidth":           false,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":            "boolean",
          "format":          "notext",
          "stateDefinition": {
            "name":      "Cold",
            "fieldName": "cold",
            "type":      "non-fixed",
            "states":    [
              {
                "name":       "Cold",
                "value":      true,
                "comparator": "==",
                "styleName":  "coldFormatterStyle"
              },
              {
                "name":       "Warm",
                "value":      false,
                "comparator": "==",
                "styleName":  "warmFormatterStyle"
              }
            ]
          }
        }
      },
      {
        "targets":             5,
        "fieldName":           "visibility",
        "title":               "Visibility",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "long",
          "format":            "0.00"
        }
      },
      {
        "targets":             6,
        "fieldName":           "wind",
        "title":               "Wind",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "number",
          "format":            "0.00 Mph"
        }
      },
      {
        "targets":             7,
        "fieldName":           "events",
        "title":               "Currently",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "wrapped",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true
      },
      {
        "targets":             8,
        "fieldName":           "image",
        "title":               "Forecast",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "imagelink",     // imagelink renderer, requires the cell data to contain a url to a MediaEntity
          "format":            "scaledtoheight" // hyperlink, scaledtowidth, scaledtoheight, image
        }
      },
      {
        "targets":             9,
        "fieldName":           "location",
        "title":               "Location",
        "width":               "200px",
        "autoWidth":           false,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "location",
          "format":            "0.000000"
        }
      },
      {
        "targets":             10,
        "fieldName":           "actions",
        "title":               "Actions",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "html",
          "format":            "unsanitized"    // {string} Options are 'raw', 'unsanitized', 'format'. Note that 'unsanitized' can only be used for application data, e.g. non-user data due to XSS security vulnerability possibilities.
        }
      },
      {
        "targets":             11,
        "fieldName":           "info",
        "title":               "Link",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "hyperlink",
          "format":            "_self",          // Optional {string} Options are '_self', '_blank', '_top', '_parent'. Default is '_blank';
          "params":            {
            "textFormat":       "Go To Link",    // Optional {string} defining text to show for the link. Default 'View'
            "dependentField":   "linkText"       // Optional {string] defining the fieldName for the column that contains the link text
          }
        }
      },
      {
        "targets":             12,
        "fieldName":           "linkText",
        "title":               "LinkText",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              true,
        "inLayout":            false,
        "columnFormatter":     {
          "type":              "string"
        }
      }
    ],
    "enableSorting":    true,                   // Optional. Enable sorting capabilities for the grid.
    "multiColumnSortOrder": [                   // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
      {
        "id":         'id',                     // {string} column 'fieldName'
        "direction":  'asc'                     // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
      }
    ]
  },
  "rows":       {                               // Optional
    "selection":                  "multi",      // *{string} row selection setting. Options: 'none, 'single', 'multi'
    "defaultSelectedRows":        "",           // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
    "minHeight":                  "50",         // {string} row height setting in px.
    "autoScroll":                 true          // {boolean} scroll to the selected rows on update or resize
  },
  "styles":     {                               // Optional unless styles are defined in state formatters
    "tableWrapperStyle":              {         // {string} name of the style.
      "backgroundColor":          "#e6e6e6",    // {string} the background style color
      "secondaryBackgroundColor": "",           // {string} the secondary background style color for a gradient.
      "foregroundColor":          "",           // {string} the font color.
      "textDecoration":           "",           // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
      "image":                    "",           // {string} MediaEntity url
      "lineColor":                "#b3b3b3",    // {string} the color of the cell outline.
      "borderStyle":              "solid",      // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
      "borderWidth":              "1px",        // {string} the width of cell border in px.
      "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
      "fontStyle":                "normal",     // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
      "fontSize":                 "11px",       // {string} font size.
      "fontWeight":               "normal"      // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
    },
    "tableHeaderStyle":              {
      "backgroundColor":          "#202020",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "#c0c0c0",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "rowBorderStyle":                {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "cellBorderStyle":               {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "2px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "rowBackgroundStyle":            {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "2px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               ""
    },
    "rowAlternateBackgroundStyle":   {
      "backgroundColor":          "#f5f5f5",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "11px",
      "fontWeight":               ""
    },
    "rowHoverStyle":                 {
      "backgroundColor":          "#dddddd",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#333333",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "rowSelectedStyle":              {
      "backgroundColor":          "#0088cc",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "paginationButtonStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#202020",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "paginationHoverStyle": {
      "backgroundColor":          "#252525",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "paginationSelectedStyle": {
      "backgroundColor":          "#0088cc",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "toolbarStyle": {
      "backgroundColor":          "#fafafa",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#202020",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               ""
    },
    "rowFormatterStyle":             {
      "backgroundColor":          "#636262",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "black",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "sortAscendingStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "sortDescendingStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowIconStyle": {
        "backgroundColor":          "",
        "secondaryBackgroundColor": "",
        "foregroundColor":          "",
        "textDecoration":           "",
        "image":                    "/Thingworx/MediaEntities/GridRowIcon",
        "lineColor":                "",
        "borderStyle":              "",
        "borderWidth":              "",
        "fontFamily":               "",
        "fontStyle":                "",
        "fontSize":                 "",
        "fontWeight":               ""
    },
    "rowExpansionIconStyle": {
        "backgroundColor":          "",
        "secondaryBackgroundColor": "",
        "foregroundColor":          "",
        "textDecoration":           "",
        "image":                    "/Thingworx/MediaEntities/GridRowExpansionIcon",
        "lineColor":                "",
        "borderStyle":              "",
        "borderWidth":              "",
        "fontFamily":               "",
        "fontStyle":                "",
        "fontSize":                 "",
        "fontWeight":               ""
    },
    "rowCollapseIconStyle": {
        "backgroundColor":          "",
        "secondaryBackgroundColor": "",
        "foregroundColor":          "",
        "textDecoration":           "",
        "image":                    "/Thingworx/MediaEntities/GridRowCollapseIcon",
        "lineColor":                "",
        "borderStyle":              "",
        "borderWidth":              "",
        "fontFamily":               "",
        "fontStyle":                "",
        "fontSize":                 "",
        "fontWeight":               ""
    },
    "snowFormatterStyle":             {
      "backgroundColor":          "#00ffff",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "black",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "coldFormatterStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "underline",
      "image":                    "/Thingworx/MediaEntities/SubsystemNotRunning",
      "lineColor":                "black",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "warmFormatterStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "underline",
      "image":                    "/Thingworx/MediaEntities/SubsystemRunning",
      "lineColor":                "black",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "cellValidationErrorStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "none",
      "image":                    "",
      "lineColor":                "red",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "cellValidationErrorTooltipStyle":             {
      "backgroundColor":          "red",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "none",
      "image":                    "",
      "lineColor":                "white",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "tooltipStyle": {
      "backgroundColor":          "#0000ff",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "none",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               ""
    },
  },
  "search": {                                    // Optional search capabilities
    "multiColumn":  {                            // Optional global grid search control
      "enabled":  true,                          // {boolean} enable the grid search toolbar
      "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
    }
  },
  "resetButton": {                               // Optional reset button that allows the end-user to reset the user specific grid settings. It clears all the grid cookie values.
    "enabled": true,                             // {boolean} show the reset button in the Mashup.
    "location": "top-right"                      // {string} Location of the reset button. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
  }
};
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetWeatherEditGridConfiguration"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var result = {
  "cellEditingEnabled": false,                  // {boolean} Optional. Specifies whether Cell editing is enabled by default for the grid, required for auto-save use-case. Disable for manual save; enable 'editButtons' in config below instead.
  "columns":    {                               // Required
    "idFieldName": "id",                        // {string} Required. The name of the 'id' column containing the primary key.
    "header":       {                           // Optional
      "titleCase":   "",                        // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
      "overflow":    "tooltip"                  // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
    },
    "columnDefs":   [                           // Optional
      {
        "targets":             0,               // {integer} the index of the column to which this data applies.
        "fieldName":           "id",            // {string} the data field name.
        "title":               "Id",            // *{string} the column display name.
        "width":               "100px",         // *{string} the column width in px. Options: '*' (auto-width) or a number.
        "autoWidth":           false,           // *{boolean} enables auto width e.g. '*' setting above.
        "overflow":            "wrapped",       // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
        "headerTextAlignment": "center",        // *{string} header text alignment. Options: 'left', 'right', 'center'.
        "textAlignment":       "left",          // *{string} cell text alignment. Options: 'left', 'right', 'center'.
        "hidden":              false,           // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "integer",
          "format":            "0",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true                                                // *{boolean} to indicate whether cell editing is enable for this column
          }            
        }
      },
      {
        "targets":             1,
        "fieldName":           "date",
        "title":               "Date",
        "width":               "50px",
        "autoWidth":           false,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "datetime",
          "format":            "MM.DD.YYYY",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "errorMessage":        "[[invalidDate]]",                                // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             2,
        "fieldName":           "max_temp",
        "title":               "Max Temp",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":            "number",
          "format":          "0.00F",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          },
          "stateDefinition": {
            "name":      "OnOff",
            "fieldName": "events",
            "type":      "non-fixed",
            "states":    [
              {
                "name":       "Rain",
                "value":      "Snow",
                "comparator": "==",
                "styleName":  "snowFormatterStyle"
              },
              {
                "name":       "Fog",
                "value":      "Fog",
                "comparator": "==",
                "styleName":  "lowSalaryStyle"
              }
            ]
          }
        }
      },
      {
        "targets":             3,
        "fieldName":           "min_temp",
        "title":               "Min Temp",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "number",
          "format":            "0.00F",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             4,
        "fieldName":           "cold",
        "title":               "Cold?",
        "width":               "50px",
        "autoWidth":           false,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":            "boolean",
          "format":          "checkbox",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "errorMessage":        "[[InvalidBoolean]]",                             // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          },
          "stateDefinition": {
            "name":      "Cold",
            "fieldName": "cold",
            "type":      "non-fixed",
            "states":    [
              {
                "name":       "Cold",
                "value":      true,
                "comparator": "==",
                "styleName":  "coldFormatterStyle"
              },
              {
                "name":       "Warm",
                "value":      false,
                "comparator": "==",
                "styleName":  "warmFormatterStyle"
              }
            ]
          }
        }
      },
      {
        "targets":             5,
        "fieldName":           "visibility",
        "title":               "Visibility",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "long",
          "format":            "0.00",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             6,
        "fieldName":           "wind",
        "title":               "Wind",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "number",
          "format":            "0.00 Mph",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['NotEmpty'],                                     // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":        "[[invalidNumberNotEmpty]]",                      // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             7,
        "fieldName":           "events",
        "title":               "Currently",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "wrapped",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "string",
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
	          "types":               ['NotEmpty'],                                     // {string} optional: string validator type e.g. 'NotEmpty', 'ValidURL'.
              "errorMessage":        "[[notEmpty]]",                                   // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             8,
        "fieldName":           "image",
        "title":               "Forecast",
        "width":               "",
        "autoWidth":           true,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "imagelink",                                            // imagelink renderer, requires the cell data to contain a url to a MediaEntity
          "format":            "scaledtoheight",                                       // hyperlink, scaledtowidth, scaledtoheight, image
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "errorMessage":        "Invalid image link",                             // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             9,
        "fieldName":           "location",
        "title":               "Location",
        "width":               "200px",
        "autoWidth":           false,
        "overflow":            "tooltip",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter": {
          "type":       "location",                                                     // imagelink renderer, requires the cell data to contain a url to a MediaEntity
          "format":     "0.000000",                                                     // hyperlink, scaledtowidth, scaledtoheight, image
          "cellEditor": {                                                               // optional: defines cell-editing options for this column
            "enabled":   true,                                                          // *{boolean} to indicate whether cell editing is enable for this column
            "validator": {                                                              // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":          ['NotEmpty'],                                           // {Array} optional: defines list of validator types, e.g. 'NotEmpty', 'ValidURL' or 'Custom'.
              "errorMessage":   "[[notEmpty]]",                                         // *{string} localization token name of the error message.
              "errorStyle":     "cellValidationErrorStyle"                              // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             10,
        "fieldName":           "actions",
        "title":               "Actions",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "html",
          "format":            "unsanitized",                                          // {string} Options are 'raw', 'unsanitized', 'format'. Note that 'unsanitized' can only be used for application data, e.g. non-user data due to XSS security vulnerability possibilities.
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
	          "types":               ['NotEmpty'],                                     // {string} optional: string validator type e.g. 'NotEmpty', 'ValidURL'.
              "errorMessage":        "[[notEmpty]]",                                   // *{string} localization token name of the error message.
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          }
        }
      },
      {
        "targets":             11,
        "fieldName":           "info",
        "title":               "Link",
        "width":               "*",
        "autoWidth":           true,
        "overflow":            "ellipsis",
        "headerTextAlignment": "center",
        "textAlignment":       "center",
        "hidden":              false,
        "inLayout":            true,
        "columnFormatter":     {
          "type":              "hyperlink",
          "format":            "_self",                                                // Optional {string} Options are '_self', '_blank', '_top', '_parent'. Default is '_blank';
          "params":            {
            "textFormat":       "Go To Link"                                           // Optional {string} defining text to show for the link. Default 'View'
          },
          "cellEditor":          {                                                     // optional: defines cell-editing options for this column
            "enabled":             true,                                               // *{boolean} to indicate whether cell editing is enable for this column
            "validator":           {                                                   // optional: when defined will validate input values against the chosen validator types and error and success messages will be displayed.
              "types":               ['ValidURL'],                                     // {string} optional: string validator type e.g. 'NotEmpty', 'ValidURL'.
              "errorMessage":        "[[invalidURL]]",                                 // *{string} localization token name of the error message
              "errorStyle":          "cellValidationErrorStyle"                        // *{string} style definition name of the error message.
            }
          },
        }
      }
    ],
    "enableSorting":    true,                   // Optional. Enable sorting capabilities for the grid.
    "multiColumnSortOrder": [                   // Optional. Sorts grid by multiple columns. The most prominent column is listed last.
      {
        "id":         'id',                     // {string} column 'fieldName'
        "direction":  'asc'                     // {string} direction of the sort, e.g. ascending or descending. Options: 'asc', 'des'
      }
    ]
  },
  "rows":       {                               // Optional
    "selection":                  "multi",      // *{string} row selection setting. Options: 'none, 'single', 'multi'
    "defaultSelectedRows":        "",           // *{string} default row selection setting starting with row 1. Options: '1', '1,2,3', '1-5,10'
    "minHeight":                  "50",         // {string} row height setting in px.
    "autoScroll":                 true          // {boolean} scroll to the selected rows on update or resize
  },
  "styles":     {                               // Optional unless styles are defined in state formatters
    "tableWrapperStyle":              {         // {string} name of the style.
      "backgroundColor":          "#e6e6e6",    // {string} the background style color
      "secondaryBackgroundColor": "",           // {string} the secondary background style color for a gradient.
      "foregroundColor":          "",           // {string} the font color.
      "textDecoration":           "",           // {string} text decoration settings. Options: 'underline', 'line-through', 'overline'
      "image":                    "",           // {string} MediaEntity url
      "lineColor":                "#b3b3b3",    // {string} the color of the cell outline.
      "borderStyle":              "solid",      // {string} the style of the cell outline. Options: 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'none', hidden.
      "borderWidth":              "1px",        // {string} the width of cell border in px.
      "fontFamily":               ["helvetica", "arial"],  // {string[]} array of fonts.
      "fontStyle":                "normal",     // {string} the style of the font. Options: 'normal', 'italic', 'oblique'
      "fontSize":                 "11px",       // {string} font size.
      "fontWeight":               "normal"      // {string} font weight. Options: 'normal', 'bold', 'bolder', 'lighter', number
    },
    "tableHeaderStyle":              {
      "backgroundColor":          "#202020",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "#c0c0c0",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "rowBorderStyle":                {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "cellBorderStyle":               {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "2px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "rowBackgroundStyle":            {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "2px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               ""
    },
    "rowAlternateBackgroundStyle":   {
      "backgroundColor":          "#f5f5f5",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "11px",
      "fontWeight":               ""
    },
    "rowHoverStyle":                 {
      "backgroundColor":          "#dddddd",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#333333",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "rowSelectedStyle":              {
      "backgroundColor":          "#0088cc",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "bold"
    },
    "paginationButtonStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#202020",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "paginationHoverStyle": {
      "backgroundColor":          "#252525",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "paginationSelectedStyle": {
      "backgroundColor":          "#0088cc",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               "bold"
    },
    "toolbarStyle": {
      "backgroundColor":          "#fafafa",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#202020",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               ""
    },
    "rowFormatterStyle":             {
      "backgroundColor":          "#636262",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "black",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "sortAscendingStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridSortAscendingArrow",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "sortDescendingStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridSortDescendingArrow",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowIconStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridRowIcon",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowExpansionIconStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridRowExpansionIcon",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "rowCollapseIconStyle": {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "",
      "textDecoration":           "",
      "image":                    "/Thingworx/MediaEntities/GridRowCollapseIcon",
      "lineColor":                "",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               "",
      "fontStyle":                "",
      "fontSize":                 "",
      "fontWeight":               ""
    },
    "snowFormatterStyle":             {
      "backgroundColor":          "#00ffff",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "underline",
      "image":                    "",
      "lineColor":                "black",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "coldFormatterStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "underline",
      "image":                    "/Thingworx/MediaEntities/SubsystemNotRunning",
      "lineColor":                "black",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "warmFormatterStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "underline",
      "image":                    "/Thingworx/MediaEntities/SubsystemRunning",
      "lineColor":                "black",
      "borderStyle":              "",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "14px",
      "fontWeight":               "bold"
    },
    "cellValidationErrorStyle":             {
      "backgroundColor":          "",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "black",
      "textDecoration":           "none",
      "image":                    "",
      "lineColor":                "red",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "cellValidationErrorTooltipStyle":             {
      "backgroundColor":          "red",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "white",
      "textDecoration":           "none",
      "image":                    "",
      "lineColor":                "white",
      "borderStyle":              "solid",
      "borderWidth":              "1px",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "11px",
      "fontWeight":               "normal"
    },
    "tooltipStyle": {
      "backgroundColor":          "#0000ff",
      "secondaryBackgroundColor": "",
      "foregroundColor":          "#ffffff",
      "textDecoration":           "",
      "image":                    "",
      "lineColor":                "",
      "borderStyle":              "none",
      "borderWidth":              "",
      "fontFamily":               ["helvetica", "arial"],
      "fontStyle":                "normal",
      "fontSize":                 "12px",
      "fontWeight":               ""
    },
  },
  "search": {                                    // Optional search capabilities
    "multiColumn":  {                            // Optional global grid search control
      "enabled":  true,                          // {boolean} enable the grid search toolbar
      "location": "top-left"                     // {string} location of grid search toolbar. Options: 'top-right', 'top-left', 'bottom-right', 'bottom-left'
    }
  },
  "resetButton": {                               // Optional reset button that allows the end-user to reset the user specific grid settings. It clears all the grid cookie values.
    "enabled": true,                             // {boolean} show the reset button in the Mashup.
    "location": "top-left"                       // {string} Location of the reset button. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
  },
  "editButtons": {                               // Optional edit buttons to start allow edit, save and cancel edits.
    "enabled": true,                             // {boolean} show the 'Edit' button initially and once clicked, show 'Save' and 'Cancel' buttons
    "location": "top-right",                     // {string} Location of the edit buttons. Options:  top-right', 'top-left', 'bottom-right', 'bottom-left'
    "enableAddDeleteButtons": true               // {boolean} Optional. Specifies whether 'Add' and 'Delete' buttons are enabled in the grid edit toolbar.
  }
};
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="GetWeatherFooterData"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * GetFooterDataNoDataShape service
 *
 * This is an Example service that creates an InfoTable with footer data for the Weather Grid Examples.
 *
 * @return {InfoTable} with footer data.
 **/
var result = createInfoTable();
/**
 * Create an InfoTable for your footer data
 * @returns {InfoTable} with data.
 */
function createInfoTable() {
    var days = getTotalColdDays(); // Custom function to calculate your own info.
    var params = {
        infoTableName: undefined /* STRING */
    };
    var result = Resources["InfoTableFunctions"].CreateInfoTable(params);
    //Add field to the InfoTable, ensure same field names in this footer data as are used in the actual table data:
    result.AddField({name: "id", baseType: "STRING"});
    result.AddField({name: "date", baseType: "STRING"});
    result.AddField({name: "max_temp", baseType: "STRING"});
    result.AddField({name: "min_temp", baseType: "STRING"});
    result.AddField({name: "cold", baseType: "STRING"});
    result.AddField({name: "visibility", baseType: "STRING"});
    result.AddField({name: "wind", baseType: "STRING"});
    result.AddField({name: "events", baseType: "STRING"});
    result.AddField({name: "image", baseType: "STRING"});
    result.AddField({name: "location", baseType: "STRING"});
    result.AddField({name: "actions", baseType: "STRING"});
    result.AddField({name: "info", baseType: "STRING"});

    // You can add rows with just text:
    result.AddRow({
        'id':           'ID',
        'date':			'DATE',
        'max_temp':		'MAX',
        'min_temp':		'MIN',
        'cold':			'COLD',
        'visibility':	'VIS',
        'wind': 		'WIND',
        'events':		'EVENTS',
        'image':		'IMAGE',
        'location':		'LOC',
        'actions':		'ACTIONS',
        'info':			'INFO'
    });
    // You can also perform client side calculations in the grid using {#stat_count}, {#stat_max}, {#stat_min}, {#stat_average}, {#stat_total} functions.
    // {#stat_count}: counts the number of rows.
    // {#stat_max}: calculates the maximum client side value for the values in the column.
    // {#stat_min}: calculates the minimum client side value for the values in the column.
    // {#stat_average}: calculates the average client side value for the values in the column.
    // {#stat_total}: calculates the total client side value for the values in the column.
    // #cspan: span columns.
    // Or you can perform your own calculations in this service and add them to the footer as shown in the 'cold' column below.
    result.AddRow({
        'id':           'Count: {#stat_count}', // calculate row count on client side grid data.
        'date':			'',
        'max_temp':		'Max: {#stat_max}',     // calculate maximum value on client side grid data.
        'min_temp':		'Min: {#stat_min}',     // calculate minimum value on client side grid data.
        'cold':			'#Cold Days: ' + days,
        'visibility':	'Total: {#stat_total}', // calculate total value on client side grid data.
        'wind': 		'Avg: {#stat_average}', // calculate average value on client side grid data.
        'events':		'',
        'image':		'',
        'location':		'',
        'actions':		'',
        'info':			''
    });
    return result;
}

/**
* Custom function to make your own calculated values to put in the footer.
*/
function getTotalColdDays() {
    var entries = Things["WeatherDataTable"].GetDataTableEntries();
    var total = 0;
    for (var i=0; i < entries.length; i++) {
        if (entries[i].cold === true) {
            total++;
        }
    }
    return total;
}

]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="initAdvancedDataType"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 *  'AdvancedDataType_DT' Data-Table initialization script
 *
 *  Fills the 'AdvancedDataType_DT' with example AdvancedDataType_Mashup.
 *
 *  Required inputs:
 *  none
 *
 *  Required outputs:
 *  Nothing
 */

// no return
Things["AdvancedDataType_DT"].EnableThing();

// no return
Things["AdvancedDataType_DT"].RestartThing();

var startId = Things["AdvancedDataType_DT"].GetDataTableEntryCount();

var myInfoTable = {rows:[], dataShape: DataShapes["InfoTableExample_DS"].GetDataShapeMetadataAsJSON()};

for(var i=1;i<=100;i++)
{
    var newId = startId + i;
    var values = Things["AdvancedDataType_DT"].CreateValues();
    
    values.id = newId;
    
    values.vec2_example = {
        x: Math.floor((Math.random() * 100) + 1), 				
        y: Math.floor((Math.random() * 100) + 1)
    };													// Vec2 Data Type must be an object with x and y keys
    
    values.vec3_example = {
        x: Math.floor((Math.random() * 100) + 1), 
        y: Math.floor((Math.random() * 100) + 1), 
        z: Math.floor((Math.random() * 100) + 1)
    };													// Vec3 Data Type must be an object with x, y and z keys
    
    values.vec4_example = {
        x: Math.floor((Math.random() * 100) + 1), 
        y: Math.floor((Math.random() * 100) + 1), 
        z: Math.floor((Math.random() * 100) + 1), 
        w: Math.floor((Math.random() * 100) + 1)
    };													// Vec4 Data Type must be an object with x, y, z and w keys
    
    values.thingcode_example = {
        domainId: Math.floor((Math.random() * 100) + 1), 
        instanceId: Math.floor((Math.random() * 100) + 1)
    };													// Thingcode Data Type must be an object with domainId and instanceId keys
    
    myInfoTable.rows.push({
        id: Math.floor((Math.random() * 100) + 1), 
        random_number: Math.floor((Math.random() * 100) + 1), 
        date: new Date()
    });													// InfoTable Data Type must be an DataTable
    values.infotable_example = myInfoTable;
    
    if(i % 5 === 0) {
        values.imagelink_example = "/Thingworx/MediaEntities/cloudy";
    }
    else if(i % 5 === 1) {
        values.imagelink_example = "/Thingworx/MediaEntities/rain";
    }
    else if (i % 5 === 2) {
        values.imagelink_example = "/Thingworx/MediaEntities/fog";
    }
    else if (i % 5 === 3) {
        values.imagelink_example = "/Thingworx/MediaEntities/sunny";
    }
    else if (i % 5 === 4) {
        values.imagelink_example = "/Thingworx/MediaEntities/snow";
    }
    else{
        values.imagelink_example = "/Thingworx/MediaEntities/fog";
    }
    
    var params = {
        values : values
    };
    var id = Things["AdvancedDataType_DT"].AddOrUpdateDataTableEntry(params);
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="InitPartsTable"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 * Service to initialize the Parts Data Table.
 *
 * Requires the following input parameters:
 * 'childLevels'  {number}  the number of child-levels to create. Maximum: 25
 * 'numberParts'  {number}  the number of part rows to create per level. Maximum: 100
 *
 * NOTE:
 */

// Input parameters default values;
if (childLevels === undefined || childLevels < 0 || childLevels > 25) {
    throw 'The number of child levels must be greater than 0 and less than or equal to 25';
}
if (numberParts === undefined || numberParts < 0 || numberParts > 100000) {
    throw 'The number of parts per child level must greater than 0 and less than or equal to 100K';
}

var levels = childLevels + 1;
var partsPerLevel = numberParts;

var root = '/';
var partNumberPrefix1 = 'WCDS';
var date = new Date("2017/01/01");
var earlierDate;
var currentLevel = 1;
var partId = 1;
var b = 1;

var totalRows = Math.pow(numberParts, childLevels);
var dbEntries = Things["PartsTable"].GetDataTableEntryCount();
if (dbEntries + totalRows > 100000) {
    throw 'This operation would create more than the maximum row limit of 100K when adding ' + totalRows + ' rows to your database with a ' + dbEntries + ' rows.';
}
if (totalRows > 100000) {
    throw "You can't create more than 100K rows at a time. Currently you specified " + totalRows;
} else {
    createLevel(root, currentLevel);
}

function createLevel(myParentId, level) {
    var rows = [];

    for (var j = 1; j <= partsPerLevel; j++) {
        var guid = generateGUID();
        var row = createRow(myParentId, level, guid);
        // tags:TAGS
        var tags = new Array();
        var params = {
            tags : tags,
            source : me.name,
            values : row
        };
        // AddOrUpdateDataTableEntry(tags:TAGS, source:STRING("me.name"), values:INFOTABLE(PartsTable), location:LOCATION):STRING
        Things["PartsTable"].AddOrUpdateDataTableEntry(params);

        if (level < levels) {
            createLevel(guid, level + 1);
        }
    }
}

function createRow(myParentId, level, rowId) {
    // values:INFOTABLE(Datashape: PartsDataShape)
    var newEntry = Things["PartsTable"].CreateValues();
    newEntry.parentId = myParentId;
    newEntry.id = rowId;
    var evnt;
    if(b % 5 == 0)
        evnt = 'DCM-4000XP';
    else if(b % 5 == 1)
        evnt = 'AXP-2000';
    else if (b % 5 == 2)
        evnt = 'AXP-2500';
    else if (b % 5 == 3)
        evnt = 'DRP-5000';
    else if (b % 5 == 4)
        evnt = 'XMS-1000P';
    else
        evnt = 'Undefined';
    newEntry.name = evnt;
    newEntry.number = createPartNumber(partId);
    earlierDate = date.setDate(date.getDate() - 1);
    newEntry.orderDate = earlierDate;
    newEntry.quantity = partId;
    newEntry.cost = Math.floor((Math.random() * 100) + 1) / 100;
    newEntry.backOrder = (b % 5) ? true : false;
    newEntry.hasChildren = level < levels ? '1' : '0';
    b++;
    return newEntry;
}

function createPartNumber(partIndex) {
    var partName = '';
    if (partIndex < 10) {
        partName = '0000' + partIndex;
    }
    else if (10 >= partIndex && partIndex < 100) {
        partName = '000' + partIndex;
    }
    else if (100 >= partIndex && partIndex < 1000) {
        partName = '00' + partIndex;
    }
    else if (1000 >= partIndex && partIndex < 10000) {
        partName = '0' + partIndex;
    }
    else if (10000 >= partIndex && partIndex < 100000) {
        partName = partIndex;
    }
    return partNumberPrefix1 + partName;
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="InitWeatherTable"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[/**
 *  Weather Data Example with Query parameter
 *  'WeatherDataTable' Data-Table initialization script
 *
 *  Fills the 'WeatherDataTable' with example weather data.
 *
 *  Required inputs:
 *  none
 *
 *  Required outputs:
 *  Nothing
 */

// no return
Things["WeatherDataTable"].EnableThing();

// no return
Things["WeatherDataTable"].RestartThing();

var d1 = new Date("2015/01/01");
var d;
var startId = Things["WeatherDataTable"].GetDataTableEntryCount();

for(var i=1;i<=100;i++)
{
    var newId = startId + i;
    var rowEditBtn = 'rowEditBtn-' + newId;
    var rowSaveBtn = 'rowSaveBtn-' + newId;
    var rowCancelBtn = 'rowCancelBtn-' + newId;

    var values = Things["WeatherDataTable"].CreateValues();
    values.id = newId;
    d = d1.setDate(d1.getDate() - 1);
    if(i == 10)
        d1 = new Date("2015/01/12 10:00:00");
    values.date = d;
    values.max_temp = Math.floor((Math.random() * 100) + 1);
    values.min_temp = Math.floor((Math.random() * 100) + 1);
    values.cold = values.max_temp < 50 ? true : false;
    values.visibility = Math.floor((Math.random() * 100) + 1);
    values.wind = Math.floor((Math.random() * 100) + 1);
    values.location = {latitude: 40.057717, longitude: -75.670809, elevation: 0};
    values.info = 'http://www.ptc.com';
    values.actions = '<a href="http://www.ptc.com" target="_blank">ptc website</a>';
    var evnt = '';
    var rnd = Math.floor((Math.random() * 100) + 1);
    if(i % 5 === 0) {
        evnt = 'Cloudy';
        values.image = "/Thingworx/MediaEntities/cloudy";
        values.linkText = 'See PTC on a cloudy day'; // put in [[l8n token]] to use l8n tokens.
    }
    else if(i % 5 === 1) {
        evnt = 'Rain';
        values.image = "/Thingworx/MediaEntities/rain";
        values.linkText = 'See PTC on a rainy day';
    }
    else if (i % 5 === 2) {
        evnt = 'Fog';
        values.image = "/Thingworx/MediaEntities/fog";
        values.linkText = 'See PTC on a foggy day';
    }
    else if (i % 5 === 3) {
        evnt = 'Sunny';
        values.image = "/Thingworx/MediaEntities/sunny";
        values.linkText = 'See PTC on a sunny day';
    }
    else if (i % 5 === 4) {
        evnt = 'Snow';
        values.image = "/Thingworx/MediaEntities/snow";
        values.linkText = 'See PTC on a snowy day';
    }
    else if (i % 5 === 5) {
        evnt = 'Fog-Rain';
        values.image = "/Thingworx/MediaEntities/fog";
        values.linkText = 'See PTC on a foggy/rainy day';
    }
    else {
        evnt = 'None';
    }
    values.events = evnt;
    var params = {
        values : values
    };

    var id = Things["WeatherDataTable"].AddOrUpdateDataTableEntry(params);
}
]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="SelectRow"><ConfigurationTables><ConfigurationTable dataShapeName="" description="" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var query =
{
    "filters": {
        "type": "And",
        "filters": [
            {
                "type": "EQ",
                "fieldName": "name",
                "value": "AXP-2000"
            },
            {
                "type": "EQ",
                "fieldName": "number",
                "value": "WCDS00001"
            },            
            {
                "type": "EQ",
                "fieldName": "cost",
                "value": "0.2"
            }
        ]
    }
};


var result = Things["PartsTable"].QueryDataTableEntries({
	maxItems: 1 /* NUMBER */,
	values: undefined /* INFOTABLE */,
	query: query /* QUERY */,
	source: undefined /* STRING */,
	tags: undefined /* TAGS */
});]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation><ServiceImplementation description="" handlerName="Script" name="StartEdit"><ConfigurationTables><ConfigurationTable dataShapeName="" description="Script" isMultiRow="false" name="Script" ordinal="0"><DataShape><FieldDefinitions><FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/></FieldDefinitions></DataShape><Rows><Row><code><![CDATA[var result = true;]]></code></Row></Rows></ConfigurationTable></ConfigurationTables></ServiceImplementation></ServiceImplementations><Subscriptions/></ThingShape><PropertyBindings/><RemotePropertyBindings/><RemoteServiceBindings/><RemoteEventBindings/><AlertConfigurations/><ImplementedShapes/><ThingProperties/><ConfigurationChanges><ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2023-01-12T04:55:23.928Z" user="lixil001"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicParts : service updated&#10;GetDynamicPartsLee : service added&#10;" timestamp="2023-01-29T06:54:44.821Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : service updated&#10;" timestamp="2023-01-29T06:59:30.111Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : input parameter selected added, inputs updated, input parameter selected updated, inputs updated&#10;" timestamp="2023-01-29T07:02:12.487Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : service updated&#10;" timestamp="2023-01-29T07:03:10.166Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : service updated&#10;" timestamp="2023-01-29T07:04:08.162Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : service updated&#10;" timestamp="2023-01-29T07:05:03.424Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : input parameter selected deleted, inputs updated&#10;" timestamp="2023-01-29T07:07:17.254Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : input parameter name added, inputs updated, input parameter parent updated, inputs updated&#10;" timestamp="2023-01-29T07:16:25.344Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : input parameter parentName updated, inputs updated&#10;" timestamp="2023-01-29T07:22:20.670Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : service updated&#10;" timestamp="2023-01-29T07:24:13.700Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : input parameter name updated, inputs updated&#10;" timestamp="2023-01-29T07:27:18.959Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : input parameter name deleted, inputs updated&#10;" timestamp="2023-01-29T07:29:00.172Z" user="pat"/><ConfigurationChange changeAction="MODIFY" changeReason="services : GetDynamicPartsLee : service updated&#10;" timestamp="2023-01-29T07:30:10.199Z" user="pat"/></ConfigurationChanges></Thing></Things></Entities>